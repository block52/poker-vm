#!/bin/bash

# Cosmos Integration Helper Script
# This script helps integrate the private Cosmos SDK chain with the Poker VM TypeScript application

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CHAIN_ID="poker-vm-1"
TOKEN_DENOM="upvm"
RPC_ENDPOINT="http://localhost:26657"
REST_ENDPOINT="http://localhost:1317"
GRPC_ENDPOINT="localhost:9090"
HOME_DIR="$HOME/.poker"
KEY_NAME="alice"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Check if chain is running
check_chain_status() {
    print_header "Checking Chain Status"
    
    if curl -s "$RPC_ENDPOINT/status" > /dev/null 2>&1; then
        print_status "✅ Chain is running at $RPC_ENDPOINT"
        
        # Get chain info
        local height=$(curl -s "$RPC_ENDPOINT/status" | jq -r '.result.sync_info.latest_block_height' 2>/dev/null || echo "unknown")
        local chain_id=$(curl -s "$RPC_ENDPOINT/status" | jq -r '.result.node_info.network' 2>/dev/null || echo "unknown")
        
        print_status "Block Height: $height"
        print_status "Chain ID: $chain_id"
        
        return 0
    else
        print_error "❌ Chain is not running or not accessible at $RPC_ENDPOINT"
        print_status "Start the chain with: ./setup-cosmos.sh start"
        return 1
    fi
}

# Get validator address and balance
get_validator_info() {
    print_header "Validator Information"
    
    if [ ! -f "./poker/pokerd" ]; then
        print_error "Chain binary not found. Run ./setup-cosmos.sh setup first"
        return 1
    fi
    
    cd poker
    
    # Get validator address
    local address=$(./pokerd keys show $KEY_NAME --address --home $HOME_DIR --keyring-backend test 2>/dev/null)
    if [ $? -eq 0 ]; then
        print_status "Validator Address: $address"
        
        # Get balance
        local balance=$(./pokerd query bank balances $address --home $HOME_DIR --output json 2>/dev/null | jq -r '.balances[0].amount' 2>/dev/null || echo "0")
        print_status "Balance: $balance $TOKEN_DENOM"
        
        # Convert to human readable (assuming 6 decimals)
        local readable_balance=$((balance / 1000000))
        print_status "Balance (human readable): $readable_balance tokens"
        
        echo ""
        print_status "Use this address in your TypeScript application:"
        echo "export COSMOS_VALIDATOR_ADDRESS=\"$address\""
    else
        print_error "Could not get validator address"
        return 1
    fi
    
    cd ..
}

# Generate environment file for TypeScript application
generate_env_file() {
    print_header "Generating Environment Configuration"
    
    local env_file="./pvm/ts/.env.cosmos"
    
    # Get validator address
    local address=""
    if [ -f "./poker/pokerd" ]; then
        cd poker
        address=$(./pokerd keys show $KEY_NAME --address --home $HOME_DIR --keyring-backend test 2>/dev/null || echo "")
        cd ..
    fi
    
    cat > "$env_file" << EOF
# Cosmos SDK Configuration for Poker VM
# Generated by cosmos-integration.sh

# Database URL - tells the app to use Cosmos SDK
DB_URL=cosmos://$RPC_ENDPOINT

# Cosmos SDK Configuration
COSMOS_RPC_ENDPOINT=$RPC_ENDPOINT
COSMOS_REST_ENDPOINT=$REST_ENDPOINT
COSMOS_GRPC_ENDPOINT=$GRPC_ENDPOINT
COSMOS_CHAIN_ID=$CHAIN_ID
COSMOS_PREFIX=poker
COSMOS_DENOM=$TOKEN_DENOM
COSMOS_GAS_PRICE=0.025$TOKEN_DENOM

# Validator Information (for development/testing)
COSMOS_VALIDATOR_ADDRESS=$address
COSMOS_KEY_NAME=$KEY_NAME
COSMOS_HOME_DIR=$HOME_DIR

# Development Settings
NODE_ENV=development
DEBUG=cosmos:*

# Optional: Mnemonic for signing transactions (DEVELOPMENT ONLY!)
# COSMOS_MNEMONIC="abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"
EOF
    
    print_status "Environment file created: $env_file"
    print_warning "Remember to source this file or copy to .env"
    print_status "Example: cp $env_file ./pvm/ts/.env"
}

# Test TypeScript integration
test_typescript_integration() {
    print_header "Testing TypeScript Integration"
    
    # Check if dependencies are installed
    if [ ! -d "./pvm/ts/node_modules" ]; then
        print_status "Installing TypeScript dependencies..."
        cd ./pvm/ts
        yarn install
        cd ../..
    fi
    
    # Source environment
    if [ -f "./pvm/ts/.env.cosmos" ]; then
        source ./pvm/ts/.env.cosmos
    fi
    
    # Build TypeScript
    print_status "Building TypeScript application..."
    cd ./pvm/ts
    yarn build
    
    # Run Cosmos tests
    print_status "Running Cosmos integration tests..."
    yarn test --testNamePattern="cosmos" --passWithNoTests
    
    cd ../..
    
    print_status "✅ TypeScript integration test completed"
}

# Create test accounts
create_test_accounts() {
    print_header "Creating Test Accounts"
    
    if [ ! -f "./poker/pokerd" ]; then
        print_error "Chain binary not found"
        return 1
    fi
    
    cd poker
    
    # Create additional test accounts
    local accounts=("bob" "charlie" "diana")
    
    for account in "${accounts[@]}"; do
        print_status "Creating account: $account"
        ./pokerd keys add $account --home $HOME_DIR --keyring-backend test 2>/dev/null || print_warning "Account $account already exists"
        
        # Get address
        local address=$(./pokerd keys show $account --address --home $HOME_DIR --keyring-backend test 2>/dev/null)
        print_status "$account address: $address"
        
        # Send some tokens from validator
        print_status "Sending 1000 tokens to $account..."
        ./pokerd tx bank send $KEY_NAME $address 1000000000$TOKEN_DENOM \
            --chain-id $CHAIN_ID \
            --home $HOME_DIR \
            --keyring-backend test \
            --yes \
            --fees 1000$TOKEN_DENOM > /dev/null 2>&1 || print_warning "Failed to send tokens to $account"
    done
    
    cd ..
    print_status "Test accounts created"
}

# Show all accounts and balances
show_accounts() {
    print_header "Account Balances"
    
    if [ ! -f "./poker/pokerd" ]; then
        print_error "Chain binary not found"
        return 1
    fi
    
    cd poker
    
    # List all keys
    local keys=$(./pokerd keys list --home $HOME_DIR --keyring-backend test --output json 2>/dev/null | jq -r '.[].name' 2>/dev/null || echo "")
    
    if [ -z "$keys" ]; then
        print_warning "No keys found"
        cd ..
        return 1
    fi
    
    echo -e "${BLUE}Account Balances:${NC}"
    while IFS= read -r key; do
        if [ -n "$key" ]; then
            local address=$(./pokerd keys show $key --address --home $HOME_DIR --keyring-backend test 2>/dev/null)
            local balance=$(./pokerd query bank balances $address --home $HOME_DIR --output json 2>/dev/null | jq -r '.balances[0].amount // "0"' 2>/dev/null || echo "0")
            local readable_balance=$((balance / 1000000))
            
            printf "  %-10s %s (%s tokens)\n" "$key:" "$address" "$readable_balance"
        fi
    done <<< "$keys"
    
    cd ..
}

# Monitor chain logs
monitor_chain() {
    print_header "Monitoring Chain"
    print_status "Monitoring chain activity... (Press Ctrl+C to stop)"
    
    # Monitor using curl requests
    while true; do
        local height=$(curl -s "$RPC_ENDPOINT/status" | jq -r '.result.sync_info.latest_block_height' 2>/dev/null || echo "unknown")
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] Block Height: $height"
        sleep 5
    done
}

# Run a complete integration test
run_integration_test() {
    print_header "Running Complete Integration Test"
    
    # Step 1: Check chain
    if ! check_chain_status; then
        print_error "Chain is not running. Please start it first with ./setup-cosmos.sh start"
        return 1
    fi
    
    # Step 2: Generate environment
    generate_env_file
    
    # Step 3: Test TypeScript
    test_typescript_integration
    
    # Step 4: Create test accounts
    create_test_accounts
    
    # Step 5: Show final status
    show_accounts
    
    print_status "✅ Integration test completed successfully!"
    echo ""
    print_status "Next steps:"
    echo "  1. Copy environment: cp ./pvm/ts/.env.cosmos ./pvm/ts/.env"
    echo "  2. Start your application: cd ./pvm/ts && yarn dev"
    echo "  3. The app will automatically use Cosmos SDK for state management"
}

# Show usage
show_help() {
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  status      - Check if chain is running"
    echo "  info        - Show validator information"
    echo "  env         - Generate environment file"
    echo "  test        - Test TypeScript integration"
    echo "  accounts    - Create test accounts"
    echo "  balances    - Show all account balances"
    echo "  monitor     - Monitor chain activity"
    echo "  integration - Run complete integration test"
    echo "  help        - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 status                    # Check if chain is running"
    echo "  $0 integration              # Run complete setup and test"
    echo "  $0 accounts && $0 balances  # Create accounts and show balances"
}

# Main execution
main() {
    case "${1:-help}" in
        "status")
            check_chain_status
            ;;
        "info")
            get_validator_info
            ;;
        "env")
            generate_env_file
            ;;
        "test")
            test_typescript_integration
            ;;
        "accounts")
            create_test_accounts
            ;;
        "balances")
            show_accounts
            ;;
        "monitor")
            monitor_chain
            ;;
        "integration")
            run_integration_test
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"