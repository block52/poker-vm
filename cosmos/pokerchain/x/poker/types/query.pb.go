// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pokerchain/poker/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGameRequest defines the QueryGameRequest message.
type QueryGameRequest struct {
	GameId uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *QueryGameRequest) Reset()         { *m = QueryGameRequest{} }
func (m *QueryGameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGameRequest) ProtoMessage()    {}
func (*QueryGameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{2}
}
func (m *QueryGameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGameRequest.Merge(m, src)
}
func (m *QueryGameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGameRequest proto.InternalMessageInfo

func (m *QueryGameRequest) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// QueryGameResponse defines the QueryGameResponse message.
type QueryGameResponse struct {
	Game string `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
}

func (m *QueryGameResponse) Reset()         { *m = QueryGameResponse{} }
func (m *QueryGameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGameResponse) ProtoMessage()    {}
func (*QueryGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{3}
}
func (m *QueryGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGameResponse.Merge(m, src)
}
func (m *QueryGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGameResponse proto.InternalMessageInfo

func (m *QueryGameResponse) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

// QueryListGamesRequest defines the QueryListGamesRequest message.
type QueryListGamesRequest struct {
}

func (m *QueryListGamesRequest) Reset()         { *m = QueryListGamesRequest{} }
func (m *QueryListGamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListGamesRequest) ProtoMessage()    {}
func (*QueryListGamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{4}
}
func (m *QueryListGamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListGamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListGamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListGamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListGamesRequest.Merge(m, src)
}
func (m *QueryListGamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListGamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListGamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListGamesRequest proto.InternalMessageInfo

// QueryListGamesResponse defines the QueryListGamesResponse message.
type QueryListGamesResponse struct {
	Games string `protobuf:"bytes,1,opt,name=games,proto3" json:"games,omitempty"`
}

func (m *QueryListGamesResponse) Reset()         { *m = QueryListGamesResponse{} }
func (m *QueryListGamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListGamesResponse) ProtoMessage()    {}
func (*QueryListGamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{5}
}
func (m *QueryListGamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListGamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListGamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListGamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListGamesResponse.Merge(m, src)
}
func (m *QueryListGamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListGamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListGamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListGamesResponse proto.InternalMessageInfo

func (m *QueryListGamesResponse) GetGames() string {
	if m != nil {
		return m.Games
	}
	return ""
}

// QueryPlayerGamesRequest defines the QueryPlayerGamesRequest message.
type QueryPlayerGamesRequest struct {
	PlayerAddress string `protobuf:"bytes,1,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
}

func (m *QueryPlayerGamesRequest) Reset()         { *m = QueryPlayerGamesRequest{} }
func (m *QueryPlayerGamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPlayerGamesRequest) ProtoMessage()    {}
func (*QueryPlayerGamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{6}
}
func (m *QueryPlayerGamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlayerGamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlayerGamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlayerGamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlayerGamesRequest.Merge(m, src)
}
func (m *QueryPlayerGamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlayerGamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlayerGamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlayerGamesRequest proto.InternalMessageInfo

func (m *QueryPlayerGamesRequest) GetPlayerAddress() string {
	if m != nil {
		return m.PlayerAddress
	}
	return ""
}

// QueryPlayerGamesResponse defines the QueryPlayerGamesResponse message.
type QueryPlayerGamesResponse struct {
	Games string `protobuf:"bytes,1,opt,name=games,proto3" json:"games,omitempty"`
}

func (m *QueryPlayerGamesResponse) Reset()         { *m = QueryPlayerGamesResponse{} }
func (m *QueryPlayerGamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPlayerGamesResponse) ProtoMessage()    {}
func (*QueryPlayerGamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{7}
}
func (m *QueryPlayerGamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlayerGamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlayerGamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlayerGamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlayerGamesResponse.Merge(m, src)
}
func (m *QueryPlayerGamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlayerGamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlayerGamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlayerGamesResponse proto.InternalMessageInfo

func (m *QueryPlayerGamesResponse) GetGames() string {
	if m != nil {
		return m.Games
	}
	return ""
}

// QueryLegalActionsRequest defines the QueryLegalActionsRequest message.
type QueryLegalActionsRequest struct {
	GameId        uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerAddress string `protobuf:"bytes,2,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
}

func (m *QueryLegalActionsRequest) Reset()         { *m = QueryLegalActionsRequest{} }
func (m *QueryLegalActionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLegalActionsRequest) ProtoMessage()    {}
func (*QueryLegalActionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{8}
}
func (m *QueryLegalActionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLegalActionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLegalActionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLegalActionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLegalActionsRequest.Merge(m, src)
}
func (m *QueryLegalActionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLegalActionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLegalActionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLegalActionsRequest proto.InternalMessageInfo

func (m *QueryLegalActionsRequest) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *QueryLegalActionsRequest) GetPlayerAddress() string {
	if m != nil {
		return m.PlayerAddress
	}
	return ""
}

// QueryLegalActionsResponse defines the QueryLegalActionsResponse message.
type QueryLegalActionsResponse struct {
	Actions string `protobuf:"bytes,1,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (m *QueryLegalActionsResponse) Reset()         { *m = QueryLegalActionsResponse{} }
func (m *QueryLegalActionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLegalActionsResponse) ProtoMessage()    {}
func (*QueryLegalActionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{9}
}
func (m *QueryLegalActionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLegalActionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLegalActionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLegalActionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLegalActionsResponse.Merge(m, src)
}
func (m *QueryLegalActionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLegalActionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLegalActionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLegalActionsResponse proto.InternalMessageInfo

func (m *QueryLegalActionsResponse) GetActions() string {
	if m != nil {
		return m.Actions
	}
	return ""
}

// QueryGetPlayerStateRequest defines the QueryGetPlayerStateRequest message.
type QueryGetPlayerStateRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetPlayerStateRequest) Reset()         { *m = QueryGetPlayerStateRequest{} }
func (m *QueryGetPlayerStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlayerStateRequest) ProtoMessage()    {}
func (*QueryGetPlayerStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{10}
}
func (m *QueryGetPlayerStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlayerStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlayerStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlayerStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlayerStateRequest.Merge(m, src)
}
func (m *QueryGetPlayerStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlayerStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlayerStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlayerStateRequest proto.InternalMessageInfo

func (m *QueryGetPlayerStateRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetPlayerStateResponse defines the QueryGetPlayerStateResponse message.
type QueryGetPlayerStateResponse struct {
	PlayerState PlayerState `protobuf:"bytes,1,opt,name=player_state,json=playerState,proto3" json:"player_state"`
}

func (m *QueryGetPlayerStateResponse) Reset()         { *m = QueryGetPlayerStateResponse{} }
func (m *QueryGetPlayerStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlayerStateResponse) ProtoMessage()    {}
func (*QueryGetPlayerStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{11}
}
func (m *QueryGetPlayerStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlayerStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlayerStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlayerStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlayerStateResponse.Merge(m, src)
}
func (m *QueryGetPlayerStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlayerStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlayerStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlayerStateResponse proto.InternalMessageInfo

func (m *QueryGetPlayerStateResponse) GetPlayerState() PlayerState {
	if m != nil {
		return m.PlayerState
	}
	return PlayerState{}
}

// QueryAllPlayerStateRequest defines the QueryAllPlayerStateRequest message.
type QueryAllPlayerStateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlayerStateRequest) Reset()         { *m = QueryAllPlayerStateRequest{} }
func (m *QueryAllPlayerStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlayerStateRequest) ProtoMessage()    {}
func (*QueryAllPlayerStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{12}
}
func (m *QueryAllPlayerStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlayerStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlayerStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlayerStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlayerStateRequest.Merge(m, src)
}
func (m *QueryAllPlayerStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlayerStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlayerStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlayerStateRequest proto.InternalMessageInfo

func (m *QueryAllPlayerStateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllPlayerStateResponse defines the QueryAllPlayerStateResponse message.
type QueryAllPlayerStateResponse struct {
	PlayerState []PlayerState       `protobuf:"bytes,1,rep,name=player_state,json=playerState,proto3" json:"player_state"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlayerStateResponse) Reset()         { *m = QueryAllPlayerStateResponse{} }
func (m *QueryAllPlayerStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlayerStateResponse) ProtoMessage()    {}
func (*QueryAllPlayerStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{13}
}
func (m *QueryAllPlayerStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlayerStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlayerStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlayerStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlayerStateResponse.Merge(m, src)
}
func (m *QueryAllPlayerStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlayerStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlayerStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlayerStateResponse proto.InternalMessageInfo

func (m *QueryAllPlayerStateResponse) GetPlayerState() []PlayerState {
	if m != nil {
		return m.PlayerState
	}
	return nil
}

func (m *QueryAllPlayerStateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetActionHistoryRequest defines the QueryGetActionHistoryRequest message.
type QueryGetActionHistoryRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetActionHistoryRequest) Reset()         { *m = QueryGetActionHistoryRequest{} }
func (m *QueryGetActionHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionHistoryRequest) ProtoMessage()    {}
func (*QueryGetActionHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{14}
}
func (m *QueryGetActionHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionHistoryRequest.Merge(m, src)
}
func (m *QueryGetActionHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionHistoryRequest proto.InternalMessageInfo

func (m *QueryGetActionHistoryRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetActionHistoryResponse defines the QueryGetActionHistoryResponse message.
type QueryGetActionHistoryResponse struct {
	ActionHistory ActionHistory `protobuf:"bytes,1,opt,name=action_history,json=actionHistory,proto3" json:"action_history"`
}

func (m *QueryGetActionHistoryResponse) Reset()         { *m = QueryGetActionHistoryResponse{} }
func (m *QueryGetActionHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetActionHistoryResponse) ProtoMessage()    {}
func (*QueryGetActionHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{15}
}
func (m *QueryGetActionHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetActionHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetActionHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetActionHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetActionHistoryResponse.Merge(m, src)
}
func (m *QueryGetActionHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetActionHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetActionHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetActionHistoryResponse proto.InternalMessageInfo

func (m *QueryGetActionHistoryResponse) GetActionHistory() ActionHistory {
	if m != nil {
		return m.ActionHistory
	}
	return ActionHistory{}
}

// QueryAllActionHistoryRequest defines the QueryAllActionHistoryRequest message.
type QueryAllActionHistoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionHistoryRequest) Reset()         { *m = QueryAllActionHistoryRequest{} }
func (m *QueryAllActionHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionHistoryRequest) ProtoMessage()    {}
func (*QueryAllActionHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{16}
}
func (m *QueryAllActionHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionHistoryRequest.Merge(m, src)
}
func (m *QueryAllActionHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionHistoryRequest proto.InternalMessageInfo

func (m *QueryAllActionHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllActionHistoryResponse defines the QueryAllActionHistoryResponse message.
type QueryAllActionHistoryResponse struct {
	ActionHistory []ActionHistory     `protobuf:"bytes,1,rep,name=action_history,json=actionHistory,proto3" json:"action_history"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllActionHistoryResponse) Reset()         { *m = QueryAllActionHistoryResponse{} }
func (m *QueryAllActionHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllActionHistoryResponse) ProtoMessage()    {}
func (*QueryAllActionHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d94828f419f7527, []int{17}
}
func (m *QueryAllActionHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllActionHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllActionHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllActionHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllActionHistoryResponse.Merge(m, src)
}
func (m *QueryAllActionHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllActionHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllActionHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllActionHistoryResponse proto.InternalMessageInfo

func (m *QueryAllActionHistoryResponse) GetActionHistory() []ActionHistory {
	if m != nil {
		return m.ActionHistory
	}
	return nil
}

func (m *QueryAllActionHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "pokerchain.poker.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "pokerchain.poker.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGameRequest)(nil), "pokerchain.poker.v1.QueryGameRequest")
	proto.RegisterType((*QueryGameResponse)(nil), "pokerchain.poker.v1.QueryGameResponse")
	proto.RegisterType((*QueryListGamesRequest)(nil), "pokerchain.poker.v1.QueryListGamesRequest")
	proto.RegisterType((*QueryListGamesResponse)(nil), "pokerchain.poker.v1.QueryListGamesResponse")
	proto.RegisterType((*QueryPlayerGamesRequest)(nil), "pokerchain.poker.v1.QueryPlayerGamesRequest")
	proto.RegisterType((*QueryPlayerGamesResponse)(nil), "pokerchain.poker.v1.QueryPlayerGamesResponse")
	proto.RegisterType((*QueryLegalActionsRequest)(nil), "pokerchain.poker.v1.QueryLegalActionsRequest")
	proto.RegisterType((*QueryLegalActionsResponse)(nil), "pokerchain.poker.v1.QueryLegalActionsResponse")
	proto.RegisterType((*QueryGetPlayerStateRequest)(nil), "pokerchain.poker.v1.QueryGetPlayerStateRequest")
	proto.RegisterType((*QueryGetPlayerStateResponse)(nil), "pokerchain.poker.v1.QueryGetPlayerStateResponse")
	proto.RegisterType((*QueryAllPlayerStateRequest)(nil), "pokerchain.poker.v1.QueryAllPlayerStateRequest")
	proto.RegisterType((*QueryAllPlayerStateResponse)(nil), "pokerchain.poker.v1.QueryAllPlayerStateResponse")
	proto.RegisterType((*QueryGetActionHistoryRequest)(nil), "pokerchain.poker.v1.QueryGetActionHistoryRequest")
	proto.RegisterType((*QueryGetActionHistoryResponse)(nil), "pokerchain.poker.v1.QueryGetActionHistoryResponse")
	proto.RegisterType((*QueryAllActionHistoryRequest)(nil), "pokerchain.poker.v1.QueryAllActionHistoryRequest")
	proto.RegisterType((*QueryAllActionHistoryResponse)(nil), "pokerchain.poker.v1.QueryAllActionHistoryResponse")
}

func init() { proto.RegisterFile("pokerchain/poker/v1/query.proto", fileDescriptor_9d94828f419f7527) }

var fileDescriptor_9d94828f419f7527 = []byte{
	// 955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x69, 0x92, 0x2a, 0x2f, 0x69, 0x68, 0xa6, 0x81, 0x84, 0x6d, 0x71, 0xa3, 0x95,
	0x9a, 0x44, 0x69, 0xd9, 0xb1, 0x4d, 0xa9, 0x22, 0x0e, 0xa5, 0xce, 0x81, 0xd0, 0x2a, 0x12, 0xc5,
	0x88, 0x4b, 0x2f, 0xd6, 0x24, 0x1e, 0x36, 0x2b, 0xec, 0x9d, 0xad, 0x67, 0x1d, 0x35, 0x8a, 0x72,
	0xe1, 0x8e, 0x40, 0xe2, 0xd6, 0xbf, 0x80, 0x03, 0x07, 0x50, 0xb9, 0x20, 0x4e, 0xdc, 0x7a, 0xac,
	0xc4, 0x85, 0x13, 0x42, 0x09, 0x12, 0xff, 0x06, 0xda, 0x99, 0xb7, 0xb1, 0xd7, 0x1e, 0xaf, 0x37,
	0xd0, 0x4b, 0x34, 0x3b, 0x7e, 0x3f, 0x3e, 0xdf, 0x37, 0x33, 0xef, 0x29, 0x70, 0x33, 0x92, 0x5f,
	0x8a, 0xce, 0xfe, 0x01, 0x0f, 0x42, 0xa6, 0x97, 0xec, 0xb0, 0xc2, 0x9e, 0x76, 0x45, 0xe7, 0xc8,
	0x8b, 0x3a, 0x32, 0x96, 0xf4, 0x5a, 0xcf, 0xc0, 0xd3, 0x4b, 0xef, 0xb0, 0xe2, 0x2c, 0xf2, 0x76,
	0x10, 0x4a, 0xa6, 0xff, 0x1a, 0x3b, 0x67, 0x73, 0x5f, 0xaa, 0xb6, 0x54, 0x6c, 0x8f, 0x2b, 0x61,
	0x02, 0xb0, 0xc3, 0xca, 0x9e, 0x88, 0x79, 0x85, 0x45, 0xdc, 0x0f, 0x42, 0x1e, 0x07, 0x32, 0x44,
	0xdb, 0x25, 0x5f, 0xfa, 0x52, 0x2f, 0x59, 0xb2, 0xc2, 0xdd, 0x1b, 0xbe, 0x94, 0x7e, 0x4b, 0x30,
	0x1e, 0x05, 0x8c, 0x87, 0xa1, 0x8c, 0xb5, 0x8b, 0xc2, 0x5f, 0x57, 0x6d, 0xa0, 0x11, 0xef, 0xf0,
	0x76, 0x6a, 0xb1, 0x66, 0xb5, 0x68, 0xf1, 0x23, 0xd1, 0x69, 0xa8, 0x98, 0xc7, 0x02, 0xed, 0x36,
	0x6c, 0x76, 0x7c, 0x3f, 0x49, 0xd6, 0x38, 0x08, 0x54, 0x2c, 0x53, 0xed, 0xee, 0x12, 0xd0, 0x4f,
	0x13, 0x25, 0x8f, 0x75, 0x9a, 0xba, 0x78, 0xda, 0x15, 0x2a, 0x76, 0x3f, 0x87, 0x6b, 0x99, 0x5d,
	0x15, 0xc9, 0x50, 0x09, 0x7a, 0x1f, 0x66, 0x0c, 0xce, 0x0a, 0x59, 0x25, 0x1b, 0x73, 0xd5, 0xeb,
	0x9e, 0xa5, 0x72, 0x9e, 0x71, 0xda, 0x9e, 0x7d, 0xf9, 0xe7, 0xcd, 0x89, 0xef, 0xff, 0xf9, 0x71,
	0x93, 0xd4, 0xd1, 0xcb, 0xbd, 0x0d, 0x57, 0x75, 0xd8, 0x1d, 0xde, 0x16, 0x98, 0x8a, 0x2e, 0xc3,
	0x65, 0x9f, 0xb7, 0x45, 0x23, 0x68, 0xea, 0xa0, 0x53, 0xf5, 0x99, 0xe4, 0xf3, 0x61, 0xd3, 0x5d,
	0x87, 0xc5, 0x3e, 0x63, 0x24, 0xa0, 0x30, 0x95, 0xfc, 0xac, 0x4d, 0x67, 0xeb, 0x7a, 0xed, 0x2e,
	0xc3, 0x9b, 0xda, 0x70, 0x37, 0x50, 0x71, 0x62, 0x7c, 0xae, 0xc2, 0x83, 0xb7, 0x06, 0x7f, 0xc0,
	0x30, 0x4b, 0x30, 0x9d, 0xb8, 0x2a, 0x8c, 0x63, 0x3e, 0xdc, 0x07, 0xb0, 0x6c, 0x54, 0xeb, 0x82,
	0xf6, 0x87, 0xa2, 0xb7, 0x60, 0x01, 0xcb, 0xcc, 0x9b, 0xcd, 0x8e, 0x50, 0xa9, 0xe7, 0x15, 0xb3,
	0x5b, 0x33, 0x9b, 0x6e, 0x19, 0x56, 0x86, 0x23, 0xe4, 0xe6, 0x7c, 0x82, 0x1e, 0xbb, 0xc2, 0xe7,
	0xad, 0x9a, 0x3e, 0x21, 0x35, 0xae, 0x34, 0x16, 0x9a, 0x49, 0x1b, 0xcd, 0xfb, 0xf0, 0xb6, 0x25,
	0x36, 0xe2, 0xac, 0xc0, 0x65, 0x73, 0x21, 0x52, 0xa0, 0xf4, 0xd3, 0xad, 0x82, 0x63, 0x0a, 0x2f,
	0x62, 0xa3, 0xe3, 0xb3, 0xe4, 0x66, 0xa5, 0x50, 0x4b, 0x30, 0x1d, 0x84, 0x4d, 0xf1, 0x2c, 0x95,
	0xa1, 0x3f, 0xdc, 0x03, 0xb8, 0x6e, 0xf5, 0xc1, 0x64, 0x0f, 0x61, 0xbe, 0xff, 0x96, 0xe2, 0xf5,
	0x59, 0xb5, 0x5f, 0x9f, 0x9e, 0xff, 0xf6, 0x54, 0x72, 0x87, 0xea, 0x73, 0x51, 0x6f, 0xcb, 0x6d,
	0x22, 0x5d, 0xad, 0xd5, 0xb2, 0xd0, 0x7d, 0x04, 0xd0, 0x7b, 0x8a, 0x98, 0x66, 0xcd, 0x33, 0xef,
	0xd6, 0x4b, 0xde, 0xad, 0x67, 0x1e, 0x3e, 0xbe, 0x5b, 0xef, 0x31, 0xf7, 0x53, 0xdf, 0x7a, 0x9f,
	0xa7, 0xfb, 0x13, 0x41, 0x41, 0x83, 0x69, 0x46, 0x0a, 0xba, 0xf4, 0x1f, 0x05, 0xd1, 0x9d, 0x0c,
	0xf2, 0xa4, 0x46, 0x5e, 0x1f, 0x8b, 0x6c, 0x38, 0x32, 0xcc, 0x77, 0xe1, 0x46, 0x7a, 0x06, 0xe6,
	0xb0, 0x3f, 0x36, 0x2f, 0x3d, 0xff, 0xe4, 0x22, 0x78, 0x67, 0x84, 0x17, 0x4a, 0xfd, 0x04, 0x16,
	0xb2, 0x9d, 0x03, 0xcb, 0xea, 0x5a, 0xc5, 0x66, 0x62, 0xa0, 0xdc, 0x2b, 0xbc, 0x7f, 0xd3, 0xfd,
	0x02, 0x39, 0x6b, 0xad, 0x96, 0x95, 0xf3, 0x75, 0x9d, 0xe1, 0x2f, 0x04, 0xa5, 0x0d, 0x27, 0xca,
	0x91, 0x76, 0xe9, 0x7f, 0x48, 0x7b, 0x6d, 0x67, 0x59, 0x7d, 0x3e, 0x0f, 0xd3, 0x9a, 0x9d, 0x7e,
	0x4d, 0x60, 0xc6, 0x74, 0x54, 0xba, 0x6e, 0xc5, 0x1a, 0x6e, 0xdf, 0xce, 0xc6, 0x78, 0x43, 0x93,
	0xd3, 0x2d, 0x7f, 0xf5, 0xfb, 0xdf, 0xdf, 0x4d, 0x6e, 0xd2, 0x0d, 0x76, 0x24, 0xbb, 0x9d, 0xae,
	0x12, 0x9d, 0x90, 0xb7, 0x05, 0x1b, 0x3d, 0x88, 0xe8, 0x37, 0x04, 0xa6, 0x92, 0xc6, 0x46, 0x6f,
	0x8d, 0x4e, 0xd2, 0xd7, 0xdf, 0x9d, 0xb5, 0x71, 0x66, 0x48, 0xb2, 0xa5, 0x49, 0xaa, 0xb4, 0x3c,
	0x9e, 0x24, 0xe9, 0x82, 0xec, 0x18, 0x5b, 0xe3, 0x09, 0x7d, 0x4e, 0x60, 0xf6, 0xbc, 0xc5, 0xd3,
	0xcd, 0xd1, 0xf9, 0x06, 0x07, 0x84, 0x73, 0xbb, 0x90, 0x2d, 0x02, 0xde, 0xd5, 0x80, 0x1e, 0xbd,
	0x33, 0x1e, 0xb0, 0x15, 0xa8, 0xb8, 0xa1, 0xfb, 0x3b, 0x7d, 0x41, 0x60, 0xae, 0x6f, 0x1a, 0xd0,
	0x3b, 0x39, 0x47, 0x33, 0x34, 0x76, 0x9c, 0x77, 0x0b, 0x5a, 0x23, 0xe2, 0x8e, 0x46, 0xac, 0xd1,
	0x0f, 0x0b, 0x9c, 0xa6, 0xe9, 0x5e, 0x1a, 0x92, 0x1d, 0x67, 0xa7, 0xc9, 0x09, 0xfd, 0x8d, 0xc0,
	0x7c, 0xff, 0xd4, 0xa0, 0x39, 0x20, 0x96, 0xc9, 0xe5, 0x78, 0x45, 0xcd, 0x11, 0xbc, 0xae, 0xc1,
	0x77, 0xe9, 0xa3, 0x02, 0xb5, 0x4d, 0xfc, 0x1b, 0x38, 0xab, 0x7a, 0xb7, 0x60, 0x58, 0xc3, 0x0b,
	0x02, 0x0b, 0xd9, 0x71, 0x44, 0x59, 0xce, 0x5d, 0xb4, 0x0d, 0x3b, 0xa7, 0x5c, 0xdc, 0x01, 0x95,
	0xdc, 0xd7, 0x4a, 0xb6, 0xe8, 0xbd, 0xc2, 0x47, 0xa0, 0x07, 0x08, 0x3b, 0xd6, 0xdd, 0xf8, 0x84,
	0xfe, 0x40, 0xe0, 0x8d, 0xe4, 0xee, 0x15, 0xc4, 0xb6, 0x4e, 0xc1, 0x3c, 0x6c, 0xfb, 0x3c, 0x73,
	0xef, 0x69, 0xec, 0x32, 0xf5, 0x2e, 0x86, 0x4d, 0x7f, 0x25, 0x70, 0x75, 0x70, 0x72, 0xd0, 0x4a,
	0x6e, 0xd5, 0x6c, 0x3d, 0xdf, 0xa9, 0x5e, 0xc4, 0x05, 0x99, 0x1f, 0x68, 0xe6, 0x0f, 0xe8, 0xd6,
	0x78, 0xe6, 0x6c, 0x97, 0x3f, 0x2f, 0xf6, 0xcf, 0x04, 0x16, 0x93, 0x62, 0x17, 0xc6, 0x1f, 0x31,
	0xb2, 0xf2, 0xf0, 0x47, 0x0d, 0x9f, 0x8b, 0x34, 0xbc, 0x2c, 0xfe, 0xf6, 0xa3, 0x97, 0xa7, 0x25,
	0xf2, 0xea, 0xb4, 0x44, 0xfe, 0x3a, 0x2d, 0x91, 0x6f, 0xcf, 0x4a, 0x13, 0xaf, 0xce, 0x4a, 0x13,
	0x7f, 0x9c, 0x95, 0x26, 0x9e, 0x94, 0xfd, 0x20, 0x3e, 0xe8, 0xee, 0x79, 0xfb, 0xb2, 0x3d, 0x32,
	0xea, 0x33, 0x8c, 0x1b, 0x1f, 0x45, 0x42, 0xed, 0xcd, 0xe8, 0x7f, 0x03, 0xde, 0xfb, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xfb, 0x3c, 0xcd, 0x21, 0x25, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Game Queries a list of Game items.
	Game(ctx context.Context, in *QueryGameRequest, opts ...grpc.CallOption) (*QueryGameResponse, error)
	// ListGames Queries a list of ListGames items.
	ListGames(ctx context.Context, in *QueryListGamesRequest, opts ...grpc.CallOption) (*QueryListGamesResponse, error)
	// PlayerGames Queries a list of PlayerGames items.
	PlayerGames(ctx context.Context, in *QueryPlayerGamesRequest, opts ...grpc.CallOption) (*QueryPlayerGamesResponse, error)
	// LegalActions Queries a list of LegalActions items.
	LegalActions(ctx context.Context, in *QueryLegalActionsRequest, opts ...grpc.CallOption) (*QueryLegalActionsResponse, error)
	// ListPlayerState Queries a list of PlayerState items.
	GetPlayerState(ctx context.Context, in *QueryGetPlayerStateRequest, opts ...grpc.CallOption) (*QueryGetPlayerStateResponse, error)
	// ListPlayerState defines the ListPlayerState RPC.
	ListPlayerState(ctx context.Context, in *QueryAllPlayerStateRequest, opts ...grpc.CallOption) (*QueryAllPlayerStateResponse, error)
	// ListActionHistory Queries a list of ActionHistory items.
	GetActionHistory(ctx context.Context, in *QueryGetActionHistoryRequest, opts ...grpc.CallOption) (*QueryGetActionHistoryResponse, error)
	// ListActionHistory defines the ListActionHistory RPC.
	ListActionHistory(ctx context.Context, in *QueryAllActionHistoryRequest, opts ...grpc.CallOption) (*QueryAllActionHistoryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Game(ctx context.Context, in *QueryGameRequest, opts ...grpc.CallOption) (*QueryGameResponse, error) {
	out := new(QueryGameResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/Game", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGames(ctx context.Context, in *QueryListGamesRequest, opts ...grpc.CallOption) (*QueryListGamesResponse, error) {
	out := new(QueryListGamesResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/ListGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlayerGames(ctx context.Context, in *QueryPlayerGamesRequest, opts ...grpc.CallOption) (*QueryPlayerGamesResponse, error) {
	out := new(QueryPlayerGamesResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/PlayerGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LegalActions(ctx context.Context, in *QueryLegalActionsRequest, opts ...grpc.CallOption) (*QueryLegalActionsResponse, error) {
	out := new(QueryLegalActionsResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/LegalActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPlayerState(ctx context.Context, in *QueryGetPlayerStateRequest, opts ...grpc.CallOption) (*QueryGetPlayerStateResponse, error) {
	out := new(QueryGetPlayerStateResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/GetPlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPlayerState(ctx context.Context, in *QueryAllPlayerStateRequest, opts ...grpc.CallOption) (*QueryAllPlayerStateResponse, error) {
	out := new(QueryAllPlayerStateResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/ListPlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetActionHistory(ctx context.Context, in *QueryGetActionHistoryRequest, opts ...grpc.CallOption) (*QueryGetActionHistoryResponse, error) {
	out := new(QueryGetActionHistoryResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/GetActionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListActionHistory(ctx context.Context, in *QueryAllActionHistoryRequest, opts ...grpc.CallOption) (*QueryAllActionHistoryResponse, error) {
	out := new(QueryAllActionHistoryResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Query/ListActionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Game Queries a list of Game items.
	Game(context.Context, *QueryGameRequest) (*QueryGameResponse, error)
	// ListGames Queries a list of ListGames items.
	ListGames(context.Context, *QueryListGamesRequest) (*QueryListGamesResponse, error)
	// PlayerGames Queries a list of PlayerGames items.
	PlayerGames(context.Context, *QueryPlayerGamesRequest) (*QueryPlayerGamesResponse, error)
	// LegalActions Queries a list of LegalActions items.
	LegalActions(context.Context, *QueryLegalActionsRequest) (*QueryLegalActionsResponse, error)
	// ListPlayerState Queries a list of PlayerState items.
	GetPlayerState(context.Context, *QueryGetPlayerStateRequest) (*QueryGetPlayerStateResponse, error)
	// ListPlayerState defines the ListPlayerState RPC.
	ListPlayerState(context.Context, *QueryAllPlayerStateRequest) (*QueryAllPlayerStateResponse, error)
	// ListActionHistory Queries a list of ActionHistory items.
	GetActionHistory(context.Context, *QueryGetActionHistoryRequest) (*QueryGetActionHistoryResponse, error)
	// ListActionHistory defines the ListActionHistory RPC.
	ListActionHistory(context.Context, *QueryAllActionHistoryRequest) (*QueryAllActionHistoryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Game(ctx context.Context, req *QueryGameRequest) (*QueryGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Game not implemented")
}
func (*UnimplementedQueryServer) ListGames(ctx context.Context, req *QueryListGamesRequest) (*QueryListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (*UnimplementedQueryServer) PlayerGames(ctx context.Context, req *QueryPlayerGamesRequest) (*QueryPlayerGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerGames not implemented")
}
func (*UnimplementedQueryServer) LegalActions(ctx context.Context, req *QueryLegalActionsRequest) (*QueryLegalActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalActions not implemented")
}
func (*UnimplementedQueryServer) GetPlayerState(ctx context.Context, req *QueryGetPlayerStateRequest) (*QueryGetPlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerState not implemented")
}
func (*UnimplementedQueryServer) ListPlayerState(ctx context.Context, req *QueryAllPlayerStateRequest) (*QueryAllPlayerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlayerState not implemented")
}
func (*UnimplementedQueryServer) GetActionHistory(ctx context.Context, req *QueryGetActionHistoryRequest) (*QueryGetActionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionHistory not implemented")
}
func (*UnimplementedQueryServer) ListActionHistory(ctx context.Context, req *QueryAllActionHistoryRequest) (*QueryAllActionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActionHistory not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Game_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Game(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/Game",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Game(ctx, req.(*QueryGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/ListGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGames(ctx, req.(*QueryListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlayerGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlayerGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlayerGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/PlayerGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlayerGames(ctx, req.(*QueryPlayerGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LegalActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLegalActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LegalActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/LegalActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LegalActions(ctx, req.(*QueryLegalActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/GetPlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPlayerState(ctx, req.(*QueryGetPlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlayerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/ListPlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPlayerState(ctx, req.(*QueryAllPlayerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetActionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetActionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetActionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/GetActionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetActionHistory(ctx, req.(*QueryGetActionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListActionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllActionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListActionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Query/ListActionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListActionHistory(ctx, req.(*QueryAllActionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pokerchain.poker.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Game",
			Handler:    _Query_Game_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _Query_ListGames_Handler,
		},
		{
			MethodName: "PlayerGames",
			Handler:    _Query_PlayerGames_Handler,
		},
		{
			MethodName: "LegalActions",
			Handler:    _Query_LegalActions_Handler,
		},
		{
			MethodName: "GetPlayerState",
			Handler:    _Query_GetPlayerState_Handler,
		},
		{
			MethodName: "ListPlayerState",
			Handler:    _Query_ListPlayerState_Handler,
		},
		{
			MethodName: "GetActionHistory",
			Handler:    _Query_GetActionHistory_Handler,
		},
		{
			MethodName: "ListActionHistory",
			Handler:    _Query_ListActionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pokerchain/poker/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Game) > 0 {
		i -= len(m.Game)
		copy(dAtA[i:], m.Game)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Game)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListGamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListGamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListGamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListGamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListGamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListGamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		i -= len(m.Games)
		copy(dAtA[i:], m.Games)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Games)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlayerGamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlayerGamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlayerGamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerAddress) > 0 {
		i -= len(m.PlayerAddress)
		copy(dAtA[i:], m.PlayerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlayerGamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlayerGamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlayerGamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		i -= len(m.Games)
		copy(dAtA[i:], m.Games)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Games)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLegalActionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLegalActionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLegalActionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerAddress) > 0 {
		i -= len(m.PlayerAddress)
		copy(dAtA[i:], m.PlayerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLegalActionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLegalActionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLegalActionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		i -= len(m.Actions)
		copy(dAtA[i:], m.Actions)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Actions)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlayerStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlayerStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlayerStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlayerStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlayerStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlayerStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PlayerState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPlayerStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlayerStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlayerStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPlayerStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlayerStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlayerStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerState) > 0 {
		for iNdEx := len(m.PlayerState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetActionHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetActionHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetActionHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ActionHistory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllActionHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllActionHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllActionHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllActionHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActionHistory) > 0 {
		for iNdEx := len(m.ActionHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovQuery(uint64(m.GameId))
	}
	return n
}

func (m *QueryGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Game)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListGamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListGamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Games)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPlayerGamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPlayerGamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Games)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLegalActionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovQuery(uint64(m.GameId))
	}
	l = len(m.PlayerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLegalActionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Actions)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlayerStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlayerStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PlayerState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPlayerStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlayerStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerState) > 0 {
		for _, e := range m.PlayerState {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetActionHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActionHistory.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllActionHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllActionHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActionHistory) > 0 {
		for _, e := range m.ActionHistory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Game = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListGamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListGamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListGamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListGamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListGamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListGamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlayerGamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlayerGamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlayerGamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlayerGamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlayerGamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlayerGamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLegalActionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLegalActionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLegalActionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLegalActionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLegalActionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLegalActionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlayerStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlayerStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlayerStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlayerStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlayerStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlayerStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PlayerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlayerStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlayerStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlayerStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlayerStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlayerStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlayerStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerState = append(m.PlayerState, PlayerState{})
			if err := m.PlayerState[len(m.PlayerState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetActionHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetActionHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetActionHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActionHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllActionHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllActionHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllActionHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionHistory = append(m.ActionHistory, ActionHistory{})
			if err := m.ActionHistory[len(m.ActionHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
