// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pokerchain/poker/v1/game.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TableType defines the different types of poker tables
type TableType int32

const (
	TableType_TABLE_TYPE_UNSPECIFIED TableType = 0
	TableType_SIT_AND_GO             TableType = 1
	TableType_CASH_GAME              TableType = 2
	TableType_TOURNAMENT             TableType = 3
)

var TableType_name = map[int32]string{
	0: "TABLE_TYPE_UNSPECIFIED",
	1: "SIT_AND_GO",
	2: "CASH_GAME",
	3: "TOURNAMENT",
}

var TableType_value = map[string]int32{
	"TABLE_TYPE_UNSPECIFIED": 0,
	"SIT_AND_GO":             1,
	"CASH_GAME":              2,
	"TOURNAMENT":             3,
}

func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}

func (TableType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_818787e46f35c66c, []int{0}
}

// GameStatus defines the current status of a game
type GameStatus int32

const (
	GameStatus_GAME_STATUS_UNSPECIFIED GameStatus = 0
	GameStatus_WAITING                 GameStatus = 1
	GameStatus_ACTIVE                  GameStatus = 2
	GameStatus_FINISHED                GameStatus = 3
	GameStatus_PAUSED                  GameStatus = 4
)

var GameStatus_name = map[int32]string{
	0: "GAME_STATUS_UNSPECIFIED",
	1: "WAITING",
	2: "ACTIVE",
	3: "FINISHED",
	4: "PAUSED",
}

var GameStatus_value = map[string]int32{
	"GAME_STATUS_UNSPECIFIED": 0,
	"WAITING":                 1,
	"ACTIVE":                  2,
	"FINISHED":                3,
	"PAUSED":                  4,
}

func (x GameStatus) String() string {
	return proto.EnumName(GameStatus_name, int32(x))
}

func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_818787e46f35c66c, []int{1}
}

// Player represents a player in a game
type Player struct {
	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BuyIn    uint64 `protobuf:"varint,2,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`
	Chips    uint64 `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	Seat     uint32 `protobuf:"varint,4,opt,name=seat,proto3" json:"seat,omitempty"`
	IsActive bool   `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_818787e46f35c66c, []int{0}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Player) GetBuyIn() uint64 {
	if m != nil {
		return m.BuyIn
	}
	return 0
}

func (m *Player) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *Player) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *Player) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

// Game represents a poker game/table
type Game struct {
	TableAddress string     `protobuf:"bytes,1,opt,name=table_address,json=tableAddress,proto3" json:"table_address,omitempty"`
	TableType    TableType  `protobuf:"varint,2,opt,name=table_type,json=tableType,proto3,enum=pokerchain.poker.v1.TableType" json:"table_type,omitempty"`
	BuyIn        uint64     `protobuf:"varint,3,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`
	Players      []Player   `protobuf:"bytes,4,rep,name=players,proto3" json:"players"`
	Status       GameStatus `protobuf:"varint,5,opt,name=status,proto3,enum=pokerchain.poker.v1.GameStatus" json:"status,omitempty"`
	SmallBlind   uint64     `protobuf:"varint,6,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"`
	BigBlind     uint64     `protobuf:"varint,7,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`
	MaxPlayers   uint32     `protobuf:"varint,8,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	MinPlayers   uint32     `protobuf:"varint,9,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`
	CreatedAt    uint64     `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_818787e46f35c66c, []int{1}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetTableAddress() string {
	if m != nil {
		return m.TableAddress
	}
	return ""
}

func (m *Game) GetTableType() TableType {
	if m != nil {
		return m.TableType
	}
	return TableType_TABLE_TYPE_UNSPECIFIED
}

func (m *Game) GetBuyIn() uint64 {
	if m != nil {
		return m.BuyIn
	}
	return 0
}

func (m *Game) GetPlayers() []Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Game) GetStatus() GameStatus {
	if m != nil {
		return m.Status
	}
	return GameStatus_GAME_STATUS_UNSPECIFIED
}

func (m *Game) GetSmallBlind() uint64 {
	if m != nil {
		return m.SmallBlind
	}
	return 0
}

func (m *Game) GetBigBlind() uint64 {
	if m != nil {
		return m.BigBlind
	}
	return 0
}

func (m *Game) GetMaxPlayers() uint32 {
	if m != nil {
		return m.MaxPlayers
	}
	return 0
}

func (m *Game) GetMinPlayers() uint32 {
	if m != nil {
		return m.MinPlayers
	}
	return 0
}

func (m *Game) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("pokerchain.poker.v1.TableType", TableType_name, TableType_value)
	proto.RegisterEnum("pokerchain.poker.v1.GameStatus", GameStatus_name, GameStatus_value)
	proto.RegisterType((*Player)(nil), "pokerchain.poker.v1.Player")
	proto.RegisterType((*Game)(nil), "pokerchain.poker.v1.Game")
}

func init() { proto.RegisterFile("pokerchain/poker/v1/game.proto", fileDescriptor_818787e46f35c66c) }

var fileDescriptor_818787e46f35c66c = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x41, 0x4f, 0xdb, 0x4c,
	0x10, 0x8d, 0x89, 0x49, 0xe2, 0x09, 0x20, 0x6b, 0x3f, 0xbe, 0xd6, 0x02, 0xd5, 0x89, 0xe8, 0x25,
	0xe2, 0x90, 0x14, 0x7a, 0xe8, 0xa1, 0xea, 0x61, 0x43, 0x4c, 0x70, 0x55, 0x42, 0x64, 0x3b, 0x54,
	0xad, 0x2a, 0xad, 0xd6, 0xc9, 0x2a, 0xac, 0x1a, 0xdb, 0x91, 0x77, 0x83, 0xf0, 0xad, 0x3f, 0xa1,
	0xa7, 0xfe, 0x26, 0x8e, 0x1c, 0x7b, 0xaa, 0x2a, 0xf8, 0x23, 0x95, 0x37, 0x0e, 0xd0, 0x8a, 0xdb,
	0xcc, 0xbc, 0xb7, 0xa3, 0xf7, 0x9e, 0x76, 0xc0, 0x9e, 0x27, 0x5f, 0x59, 0x3a, 0xbe, 0xa0, 0x3c,
	0xee, 0xa8, 0xb2, 0x73, 0x79, 0xd0, 0x99, 0xd2, 0x88, 0xb5, 0xe7, 0x69, 0x22, 0x13, 0xf4, 0xdf,
	0x03, 0xde, 0x56, 0x65, 0xfb, 0xf2, 0x60, 0x67, 0x7b, 0x9a, 0x4c, 0x13, 0x85, 0x77, 0xf2, 0x6a,
	0x49, 0xdd, 0xfb, 0xa6, 0x41, 0x65, 0x38, 0xa3, 0x19, 0x4b, 0x91, 0x05, 0x55, 0x3a, 0x99, 0xa4,
	0x4c, 0x08, 0x4b, 0x6b, 0x6a, 0x2d, 0xc3, 0x5b, 0xb5, 0xe8, 0x7f, 0xa8, 0x84, 0x8b, 0x8c, 0xf0,
	0xd8, 0x5a, 0x6b, 0x6a, 0x2d, 0xdd, 0x5b, 0x0f, 0x17, 0x99, 0x1b, 0xa3, 0x6d, 0x58, 0x1f, 0x5f,
	0xf0, 0xb9, 0xb0, 0xca, 0xcb, 0xa9, 0x6a, 0x10, 0x02, 0x5d, 0x30, 0x2a, 0x2d, 0xbd, 0xa9, 0xb5,
	0x36, 0x3d, 0x55, 0xa3, 0x5d, 0x30, 0xb8, 0x20, 0x74, 0x2c, 0xf9, 0x25, 0xb3, 0xd6, 0x9b, 0x5a,
	0xab, 0xe6, 0xd5, 0xb8, 0xc0, 0xaa, 0xdf, 0xfb, 0x51, 0x06, 0xbd, 0x4f, 0x23, 0x86, 0x5e, 0xc2,
	0xa6, 0xa4, 0xe1, 0x8c, 0x91, 0xbf, 0x65, 0x6c, 0xa8, 0x21, 0x2e, 0xb4, 0xbc, 0x03, 0x58, 0x92,
	0x64, 0x36, 0x67, 0x4a, 0xcf, 0xd6, 0xa1, 0xdd, 0x7e, 0xc2, 0x70, 0x3b, 0xc8, 0x69, 0x41, 0x36,
	0x67, 0x9e, 0x21, 0x57, 0xe5, 0x23, 0x2b, 0xe5, 0xc7, 0x56, 0xde, 0x42, 0x75, 0xae, 0x52, 0x10,
	0x96, 0xde, 0x2c, 0xb7, 0xea, 0x87, 0xbb, 0x4f, 0xae, 0x5c, 0x26, 0xd5, 0xd5, 0xaf, 0x7f, 0x35,
	0x4a, 0xde, 0xea, 0x05, 0x7a, 0x03, 0x15, 0x21, 0xa9, 0x5c, 0x08, 0x65, 0x6d, 0xeb, 0xb0, 0xf1,
	0xe4, 0xdb, 0xdc, 0xa2, 0xaf, 0x68, 0x5e, 0x41, 0x47, 0x0d, 0xa8, 0x8b, 0x88, 0xce, 0x66, 0x24,
	0x9c, 0xf1, 0x78, 0x62, 0x55, 0x94, 0x22, 0x50, 0xa3, 0x6e, 0x3e, 0xc9, 0x73, 0x0b, 0xf9, 0xb4,
	0x80, 0xab, 0x0a, 0xae, 0x85, 0x7c, 0xba, 0x04, 0x1b, 0x50, 0x8f, 0xe8, 0x15, 0x59, 0xe9, 0xae,
	0xa9, 0xbc, 0x21, 0xa2, 0x57, 0xc3, 0x42, 0x57, 0x4e, 0xe0, 0xf1, 0x3d, 0xc1, 0x28, 0x08, 0x3c,
	0x5e, 0x11, 0x5e, 0x00, 0x8c, 0x53, 0x46, 0x25, 0x9b, 0x10, 0x2a, 0x2d, 0x50, 0xfb, 0x8d, 0x62,
	0x82, 0xe5, 0xfe, 0x39, 0x18, 0xf7, 0x19, 0xa2, 0x1d, 0x78, 0x16, 0xe0, 0xee, 0x07, 0x87, 0x04,
	0x9f, 0x86, 0x0e, 0x19, 0x0d, 0xfc, 0xa1, 0x73, 0xe4, 0x1e, 0xbb, 0x4e, 0xcf, 0x2c, 0xa1, 0x2d,
	0x00, 0xdf, 0x0d, 0x08, 0x1e, 0xf4, 0x48, 0xff, 0xcc, 0xd4, 0xd0, 0x26, 0x18, 0x47, 0xd8, 0x3f,
	0x21, 0x7d, 0x7c, 0xea, 0x98, 0x6b, 0x39, 0x1c, 0x9c, 0x8d, 0xbc, 0x01, 0x3e, 0x75, 0x06, 0x81,
	0x59, 0xde, 0xff, 0x02, 0xf0, 0x10, 0x06, 0xda, 0x85, 0xe7, 0x39, 0x8f, 0xf8, 0x01, 0x0e, 0x46,
	0xfe, 0x3f, 0x9b, 0xeb, 0x50, 0xfd, 0x88, 0xdd, 0xc0, 0x1d, 0xf4, 0x4d, 0x0d, 0x01, 0x54, 0xf0,
	0x51, 0xe0, 0x9e, 0xe7, 0x3b, 0x37, 0xa0, 0x76, 0xec, 0x0e, 0x5c, 0xff, 0xc4, 0xe9, 0x99, 0xe5,
	0x1c, 0x19, 0xe2, 0x91, 0xef, 0xf4, 0x4c, 0xbd, 0xfb, 0xfe, 0xfa, 0xd6, 0xd6, 0x6e, 0x6e, 0x6d,
	0xed, 0xf7, 0xad, 0xad, 0x7d, 0xbf, 0xb3, 0x4b, 0x37, 0x77, 0x76, 0xe9, 0xe7, 0x9d, 0x5d, 0xfa,
	0xfc, 0x6a, 0xca, 0xe5, 0xc5, 0x22, 0x6c, 0x8f, 0x93, 0xa8, 0x93, 0x25, 0x8b, 0x74, 0x21, 0x58,
	0x1a, 0xd3, 0x88, 0x75, 0x1e, 0x9d, 0xd3, 0x55, 0x71, 0x50, 0xf9, 0xef, 0x12, 0x61, 0x45, 0x1d,
	0xc9, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x19, 0x43, 0xf2, 0xc0, 0x71, 0x03, 0x00, 0x00,
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Player) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Seat != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x20
	}
	if m.Chips != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Chips))
		i--
		dAtA[i] = 0x18
	}
	if m.BuyIn != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.BuyIn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.MinPlayers != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.MinPlayers))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxPlayers != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.MaxPlayers))
		i--
		dAtA[i] = 0x40
	}
	if m.BigBlind != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.BigBlind))
		i--
		dAtA[i] = 0x38
	}
	if m.SmallBlind != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.SmallBlind))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BuyIn != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.BuyIn))
		i--
		dAtA[i] = 0x18
	}
	if m.TableType != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.TableType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TableAddress) > 0 {
		i -= len(m.TableAddress)
		copy(dAtA[i:], m.TableAddress)
		i = encodeVarintGame(dAtA, i, uint64(len(m.TableAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.BuyIn != 0 {
		n += 1 + sovGame(uint64(m.BuyIn))
	}
	if m.Chips != 0 {
		n += 1 + sovGame(uint64(m.Chips))
	}
	if m.Seat != 0 {
		n += 1 + sovGame(uint64(m.Seat))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableAddress)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.TableType != 0 {
		n += 1 + sovGame(uint64(m.TableType))
	}
	if m.BuyIn != 0 {
		n += 1 + sovGame(uint64(m.BuyIn))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovGame(uint64(m.Status))
	}
	if m.SmallBlind != 0 {
		n += 1 + sovGame(uint64(m.SmallBlind))
	}
	if m.BigBlind != 0 {
		n += 1 + sovGame(uint64(m.BigBlind))
	}
	if m.MaxPlayers != 0 {
		n += 1 + sovGame(uint64(m.MaxPlayers))
	}
	if m.MinPlayers != 0 {
		n += 1 + sovGame(uint64(m.MinPlayers))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovGame(uint64(m.CreatedAt))
	}
	return n
}

func sovGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyIn", wireType)
			}
			m.BuyIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableType", wireType)
			}
			m.TableType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableType |= TableType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyIn", wireType)
			}
			m.BuyIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, Player{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GameStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallBlind", wireType)
			}
			m.SmallBlind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmallBlind |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBlind", wireType)
			}
			m.BigBlind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBlind |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayers", wireType)
			}
			m.MaxPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPlayers", wireType)
			}
			m.MinPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPlayers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGame = fmt.Errorf("proto: unexpected end of group")
)
