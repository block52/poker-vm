// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pokerchain/poker/v1/player_state.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PlayerState defines the PlayerState message.
type PlayerState struct {
	Index         string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	GameId        uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerAddress string `protobuf:"bytes,3,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
	Seat          uint64 `protobuf:"varint,4,opt,name=seat,proto3" json:"seat,omitempty"`
	Chips         uint64 `protobuf:"varint,5,opt,name=chips,proto3" json:"chips,omitempty"`
	HoleCards     string `protobuf:"bytes,6,opt,name=hole_cards,json=holeCards,proto3" json:"hole_cards,omitempty"`
	Status        string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *PlayerState) Reset()         { *m = PlayerState{} }
func (m *PlayerState) String() string { return proto.CompactTextString(m) }
func (*PlayerState) ProtoMessage()    {}
func (*PlayerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcbf56492af3566, []int{0}
}
func (m *PlayerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerState.Merge(m, src)
}
func (m *PlayerState) XXX_Size() int {
	return m.Size()
}
func (m *PlayerState) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerState.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerState proto.InternalMessageInfo

func (m *PlayerState) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *PlayerState) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *PlayerState) GetPlayerAddress() string {
	if m != nil {
		return m.PlayerAddress
	}
	return ""
}

func (m *PlayerState) GetSeat() uint64 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *PlayerState) GetChips() uint64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *PlayerState) GetHoleCards() string {
	if m != nil {
		return m.HoleCards
	}
	return ""
}

func (m *PlayerState) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*PlayerState)(nil), "pokerchain.poker.v1.PlayerState")
}

func init() {
	proto.RegisterFile("pokerchain/poker/v1/player_state.proto", fileDescriptor_cdcbf56492af3566)
}

var fileDescriptor_cdcbf56492af3566 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x6b, 0x48, 0x53, 0xd5, 0x08, 0x06, 0x83, 0xc0, 0x0b, 0x56, 0x85, 0x04, 0xea, 0x94,
	0x50, 0xf1, 0x04, 0xc0, 0x04, 0x13, 0x2a, 0x1b, 0x4b, 0xe4, 0xc6, 0xa7, 0x26, 0xa2, 0x89, 0x23,
	0xdb, 0xa9, 0x9a, 0xb7, 0xe0, 0xa1, 0x18, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x45, 0x90, 0x2f, 0x91,
	0x60, 0xfb, 0xff, 0xcf, 0xff, 0xf9, 0x74, 0x3f, 0xbd, 0xa9, 0xf4, 0x3b, 0x98, 0x34, 0x93, 0x79,
	0x19, 0xa3, 0x8c, 0xb7, 0x8b, 0xb8, 0xda, 0xc8, 0x06, 0x4c, 0x62, 0x9d, 0x74, 0x10, 0x55, 0x46,
	0x3b, 0xcd, 0x4e, 0xff, 0x72, 0x11, 0xca, 0x68, 0xbb, 0xb8, 0xfa, 0x24, 0xf4, 0xe8, 0x05, 0xb3,
	0xaf, 0x3e, 0xca, 0xce, 0xe8, 0x38, 0x2f, 0x15, 0xec, 0x38, 0x99, 0x91, 0xf9, 0x74, 0xd9, 0x1b,
	0x76, 0x41, 0x27, 0x6b, 0x59, 0x40, 0x92, 0x2b, 0x7e, 0x30, 0x23, 0xf3, 0x60, 0x19, 0x7a, 0xfb,
	0xa4, 0xd8, 0x35, 0x3d, 0x19, 0x36, 0x49, 0xa5, 0x0c, 0x58, 0xcb, 0x0f, 0x71, 0xee, 0xb8, 0xa7,
	0xf7, 0x3d, 0x64, 0x8c, 0x06, 0x16, 0xa4, 0xe3, 0x01, 0x0e, 0xa3, 0xf6, 0x9b, 0xd2, 0x2c, 0xaf,
	0x2c, 0x1f, 0x23, 0xec, 0x0d, 0xbb, 0xa4, 0x34, 0xd3, 0x1b, 0x48, 0x52, 0x69, 0x94, 0xe5, 0x21,
	0x7e, 0x36, 0xf5, 0xe4, 0xd1, 0x03, 0x76, 0x4e, 0x43, 0x7f, 0x52, 0x6d, 0xf9, 0x04, 0x9f, 0x06,
	0xf7, 0xf0, 0xfc, 0xd5, 0x0a, 0xb2, 0x6f, 0x05, 0xf9, 0x69, 0x05, 0xf9, 0xe8, 0xc4, 0x68, 0xdf,
	0x89, 0xd1, 0x77, 0x27, 0x46, 0x6f, 0xb7, 0xeb, 0xdc, 0x65, 0xf5, 0x2a, 0x4a, 0x75, 0x11, 0x37,
	0xba, 0x36, 0xb5, 0x05, 0x53, 0xca, 0x02, 0xe2, 0x7f, 0xad, 0xed, 0x86, 0xde, 0x5c, 0x53, 0x81,
	0x5d, 0x85, 0x58, 0xd7, 0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xef, 0xfe, 0xbe, 0x58,
	0x01, 0x00, 0x00,
}

func (m *PlayerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPlayerState(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HoleCards) > 0 {
		i -= len(m.HoleCards)
		copy(dAtA[i:], m.HoleCards)
		i = encodeVarintPlayerState(dAtA, i, uint64(len(m.HoleCards)))
		i--
		dAtA[i] = 0x32
	}
	if m.Chips != 0 {
		i = encodeVarintPlayerState(dAtA, i, uint64(m.Chips))
		i--
		dAtA[i] = 0x28
	}
	if m.Seat != 0 {
		i = encodeVarintPlayerState(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PlayerAddress) > 0 {
		i -= len(m.PlayerAddress)
		copy(dAtA[i:], m.PlayerAddress)
		i = encodeVarintPlayerState(dAtA, i, uint64(len(m.PlayerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GameId != 0 {
		i = encodeVarintPlayerState(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPlayerState(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayerState(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPlayerState(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovPlayerState(uint64(m.GameId))
	}
	l = len(m.PlayerAddress)
	if l > 0 {
		n += 1 + l + sovPlayerState(uint64(l))
	}
	if m.Seat != 0 {
		n += 1 + sovPlayerState(uint64(m.Seat))
	}
	if m.Chips != 0 {
		n += 1 + sovPlayerState(uint64(m.Chips))
	}
	l = len(m.HoleCards)
	if l > 0 {
		n += 1 + l + sovPlayerState(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPlayerState(uint64(l))
	}
	return n
}

func sovPlayerState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerState(x uint64) (n int) {
	return sovPlayerState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chips", wireType)
			}
			m.Chips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chips |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoleCards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HoleCards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerState = fmt.Errorf("proto: unexpected end of group")
)
