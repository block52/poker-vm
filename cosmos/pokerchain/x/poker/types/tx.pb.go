// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pokerchain/poker/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgCreateGame defines the MsgCreateGame message.
type MsgCreateGame struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MinBuyIn   uint64 `protobuf:"varint,2,opt,name=min_buy_in,json=minBuyIn,proto3" json:"min_buy_in,omitempty"`
	MaxBuyIn   uint64 `protobuf:"varint,3,opt,name=max_buy_in,json=maxBuyIn,proto3" json:"max_buy_in,omitempty"`
	SmallBlind uint64 `protobuf:"varint,4,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"`
	BigBlind   uint64 `protobuf:"varint,5,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`
	MaxPlayers uint64 `protobuf:"varint,6,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	MinPlayers uint64 `protobuf:"varint,7,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`
}

func (m *MsgCreateGame) Reset()         { *m = MsgCreateGame{} }
func (m *MsgCreateGame) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGame) ProtoMessage()    {}
func (*MsgCreateGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{2}
}
func (m *MsgCreateGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGame.Merge(m, src)
}
func (m *MsgCreateGame) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGame) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGame.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGame proto.InternalMessageInfo

func (m *MsgCreateGame) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateGame) GetMinBuyIn() uint64 {
	if m != nil {
		return m.MinBuyIn
	}
	return 0
}

func (m *MsgCreateGame) GetMaxBuyIn() uint64 {
	if m != nil {
		return m.MaxBuyIn
	}
	return 0
}

func (m *MsgCreateGame) GetSmallBlind() uint64 {
	if m != nil {
		return m.SmallBlind
	}
	return 0
}

func (m *MsgCreateGame) GetBigBlind() uint64 {
	if m != nil {
		return m.BigBlind
	}
	return 0
}

func (m *MsgCreateGame) GetMaxPlayers() uint64 {
	if m != nil {
		return m.MaxPlayers
	}
	return 0
}

func (m *MsgCreateGame) GetMinPlayers() uint64 {
	if m != nil {
		return m.MinPlayers
	}
	return 0
}

// MsgCreateGameResponse defines the MsgCreateGameResponse message.
type MsgCreateGameResponse struct {
}

func (m *MsgCreateGameResponse) Reset()         { *m = MsgCreateGameResponse{} }
func (m *MsgCreateGameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGameResponse) ProtoMessage()    {}
func (*MsgCreateGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{3}
}
func (m *MsgCreateGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGameResponse.Merge(m, src)
}
func (m *MsgCreateGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGameResponse proto.InternalMessageInfo

// MsgCreateTable defines the MsgCreateTable message.
type MsgCreateTable struct {
	Creator      string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TableAddress string    `protobuf:"bytes,2,opt,name=table_address,json=tableAddress,proto3" json:"table_address,omitempty"`
	BuyIn        uint64    `protobuf:"varint,3,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`
	TableType    TableType `protobuf:"varint,4,opt,name=table_type,json=tableType,proto3,enum=pokerchain.poker.v1.TableType" json:"table_type,omitempty"`
	SmallBlind   uint64    `protobuf:"varint,5,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"`
	BigBlind     uint64    `protobuf:"varint,6,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`
	MaxPlayers   uint32    `protobuf:"varint,7,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	MinPlayers   uint32    `protobuf:"varint,8,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`
}

func (m *MsgCreateTable) Reset()         { *m = MsgCreateTable{} }
func (m *MsgCreateTable) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTable) ProtoMessage()    {}
func (*MsgCreateTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{4}
}
func (m *MsgCreateTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTable.Merge(m, src)
}
func (m *MsgCreateTable) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTable proto.InternalMessageInfo

func (m *MsgCreateTable) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTable) GetTableAddress() string {
	if m != nil {
		return m.TableAddress
	}
	return ""
}

func (m *MsgCreateTable) GetBuyIn() uint64 {
	if m != nil {
		return m.BuyIn
	}
	return 0
}

func (m *MsgCreateTable) GetTableType() TableType {
	if m != nil {
		return m.TableType
	}
	return TableType_TABLE_TYPE_UNSPECIFIED
}

func (m *MsgCreateTable) GetSmallBlind() uint64 {
	if m != nil {
		return m.SmallBlind
	}
	return 0
}

func (m *MsgCreateTable) GetBigBlind() uint64 {
	if m != nil {
		return m.BigBlind
	}
	return 0
}

func (m *MsgCreateTable) GetMaxPlayers() uint32 {
	if m != nil {
		return m.MaxPlayers
	}
	return 0
}

func (m *MsgCreateTable) GetMinPlayers() uint32 {
	if m != nil {
		return m.MinPlayers
	}
	return 0
}

// MsgCreateTableResponse defines the MsgCreateTableResponse message.
type MsgCreateTableResponse struct {
	TableAddress string `protobuf:"bytes,1,opt,name=table_address,json=tableAddress,proto3" json:"table_address,omitempty"`
}

func (m *MsgCreateTableResponse) Reset()         { *m = MsgCreateTableResponse{} }
func (m *MsgCreateTableResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTableResponse) ProtoMessage()    {}
func (*MsgCreateTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{5}
}
func (m *MsgCreateTableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTableResponse.Merge(m, src)
}
func (m *MsgCreateTableResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTableResponse proto.InternalMessageInfo

func (m *MsgCreateTableResponse) GetTableAddress() string {
	if m != nil {
		return m.TableAddress
	}
	return ""
}

// MsgJoinGame defines the MsgJoinGame message.
type MsgJoinGame struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Seat    uint64 `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	BuyIn   uint64 `protobuf:"varint,4,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`
}

func (m *MsgJoinGame) Reset()         { *m = MsgJoinGame{} }
func (m *MsgJoinGame) String() string { return proto.CompactTextString(m) }
func (*MsgJoinGame) ProtoMessage()    {}
func (*MsgJoinGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{6}
}
func (m *MsgJoinGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinGame.Merge(m, src)
}
func (m *MsgJoinGame) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinGame) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinGame.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinGame proto.InternalMessageInfo

func (m *MsgJoinGame) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgJoinGame) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MsgJoinGame) GetSeat() uint64 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *MsgJoinGame) GetBuyIn() uint64 {
	if m != nil {
		return m.BuyIn
	}
	return 0
}

// MsgJoinGameResponse defines the MsgJoinGameResponse message.
type MsgJoinGameResponse struct {
}

func (m *MsgJoinGameResponse) Reset()         { *m = MsgJoinGameResponse{} }
func (m *MsgJoinGameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinGameResponse) ProtoMessage()    {}
func (*MsgJoinGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{7}
}
func (m *MsgJoinGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinGameResponse.Merge(m, src)
}
func (m *MsgJoinGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinGameResponse proto.InternalMessageInfo

// MsgLeaveGame defines the MsgLeaveGame message.
type MsgLeaveGame struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgLeaveGame) Reset()         { *m = MsgLeaveGame{} }
func (m *MsgLeaveGame) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveGame) ProtoMessage()    {}
func (*MsgLeaveGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{8}
}
func (m *MsgLeaveGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveGame.Merge(m, src)
}
func (m *MsgLeaveGame) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveGame) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveGame.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveGame proto.InternalMessageInfo

func (m *MsgLeaveGame) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgLeaveGame) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgLeaveGameResponse defines the MsgLeaveGameResponse message.
type MsgLeaveGameResponse struct {
}

func (m *MsgLeaveGameResponse) Reset()         { *m = MsgLeaveGameResponse{} }
func (m *MsgLeaveGameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveGameResponse) ProtoMessage()    {}
func (*MsgLeaveGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{9}
}
func (m *MsgLeaveGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveGameResponse.Merge(m, src)
}
func (m *MsgLeaveGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveGameResponse proto.InternalMessageInfo

// MsgDealCards defines the MsgDealCards message.
type MsgDealCards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgDealCards) Reset()         { *m = MsgDealCards{} }
func (m *MsgDealCards) String() string { return proto.CompactTextString(m) }
func (*MsgDealCards) ProtoMessage()    {}
func (*MsgDealCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{10}
}
func (m *MsgDealCards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDealCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDealCards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDealCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDealCards.Merge(m, src)
}
func (m *MsgDealCards) XXX_Size() int {
	return m.Size()
}
func (m *MsgDealCards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDealCards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDealCards proto.InternalMessageInfo

func (m *MsgDealCards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDealCards) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgDealCardsResponse defines the MsgDealCardsResponse message.
type MsgDealCardsResponse struct {
}

func (m *MsgDealCardsResponse) Reset()         { *m = MsgDealCardsResponse{} }
func (m *MsgDealCardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDealCardsResponse) ProtoMessage()    {}
func (*MsgDealCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{11}
}
func (m *MsgDealCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDealCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDealCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDealCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDealCardsResponse.Merge(m, src)
}
func (m *MsgDealCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDealCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDealCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDealCardsResponse proto.InternalMessageInfo

// MsgPostSmallBlind defines the MsgPostSmallBlind message.
type MsgPostSmallBlind struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgPostSmallBlind) Reset()         { *m = MsgPostSmallBlind{} }
func (m *MsgPostSmallBlind) String() string { return proto.CompactTextString(m) }
func (*MsgPostSmallBlind) ProtoMessage()    {}
func (*MsgPostSmallBlind) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{12}
}
func (m *MsgPostSmallBlind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostSmallBlind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostSmallBlind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostSmallBlind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostSmallBlind.Merge(m, src)
}
func (m *MsgPostSmallBlind) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostSmallBlind) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostSmallBlind.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostSmallBlind proto.InternalMessageInfo

func (m *MsgPostSmallBlind) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPostSmallBlind) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgPostSmallBlindResponse defines the MsgPostSmallBlindResponse message.
type MsgPostSmallBlindResponse struct {
}

func (m *MsgPostSmallBlindResponse) Reset()         { *m = MsgPostSmallBlindResponse{} }
func (m *MsgPostSmallBlindResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostSmallBlindResponse) ProtoMessage()    {}
func (*MsgPostSmallBlindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{13}
}
func (m *MsgPostSmallBlindResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostSmallBlindResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostSmallBlindResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostSmallBlindResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostSmallBlindResponse.Merge(m, src)
}
func (m *MsgPostSmallBlindResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostSmallBlindResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostSmallBlindResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostSmallBlindResponse proto.InternalMessageInfo

// MsgPostBigBlind defines the MsgPostBigBlind message.
type MsgPostBigBlind struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgPostBigBlind) Reset()         { *m = MsgPostBigBlind{} }
func (m *MsgPostBigBlind) String() string { return proto.CompactTextString(m) }
func (*MsgPostBigBlind) ProtoMessage()    {}
func (*MsgPostBigBlind) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{14}
}
func (m *MsgPostBigBlind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostBigBlind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostBigBlind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostBigBlind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostBigBlind.Merge(m, src)
}
func (m *MsgPostBigBlind) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostBigBlind) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostBigBlind.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostBigBlind proto.InternalMessageInfo

func (m *MsgPostBigBlind) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPostBigBlind) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgPostBigBlindResponse defines the MsgPostBigBlindResponse message.
type MsgPostBigBlindResponse struct {
}

func (m *MsgPostBigBlindResponse) Reset()         { *m = MsgPostBigBlindResponse{} }
func (m *MsgPostBigBlindResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostBigBlindResponse) ProtoMessage()    {}
func (*MsgPostBigBlindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{15}
}
func (m *MsgPostBigBlindResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostBigBlindResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostBigBlindResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostBigBlindResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostBigBlindResponse.Merge(m, src)
}
func (m *MsgPostBigBlindResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostBigBlindResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostBigBlindResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostBigBlindResponse proto.InternalMessageInfo

// MsgFold defines the MsgFold message.
type MsgFold struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgFold) Reset()         { *m = MsgFold{} }
func (m *MsgFold) String() string { return proto.CompactTextString(m) }
func (*MsgFold) ProtoMessage()    {}
func (*MsgFold) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{16}
}
func (m *MsgFold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFold.Merge(m, src)
}
func (m *MsgFold) XXX_Size() int {
	return m.Size()
}
func (m *MsgFold) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFold.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFold proto.InternalMessageInfo

func (m *MsgFold) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFold) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgFoldResponse defines the MsgFoldResponse message.
type MsgFoldResponse struct {
}

func (m *MsgFoldResponse) Reset()         { *m = MsgFoldResponse{} }
func (m *MsgFoldResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFoldResponse) ProtoMessage()    {}
func (*MsgFoldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{17}
}
func (m *MsgFoldResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFoldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFoldResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFoldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFoldResponse.Merge(m, src)
}
func (m *MsgFoldResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFoldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFoldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFoldResponse proto.InternalMessageInfo

// MsgCheck defines the MsgCheck message.
type MsgCheck struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgCheck) Reset()         { *m = MsgCheck{} }
func (m *MsgCheck) String() string { return proto.CompactTextString(m) }
func (*MsgCheck) ProtoMessage()    {}
func (*MsgCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{18}
}
func (m *MsgCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheck.Merge(m, src)
}
func (m *MsgCheck) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheck proto.InternalMessageInfo

func (m *MsgCheck) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCheck) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgCheckResponse defines the MsgCheckResponse message.
type MsgCheckResponse struct {
}

func (m *MsgCheckResponse) Reset()         { *m = MsgCheckResponse{} }
func (m *MsgCheckResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCheckResponse) ProtoMessage()    {}
func (*MsgCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{19}
}
func (m *MsgCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckResponse.Merge(m, src)
}
func (m *MsgCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckResponse proto.InternalMessageInfo

// MsgBet defines the MsgBet message.
type MsgBet struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Amount  uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgBet) Reset()         { *m = MsgBet{} }
func (m *MsgBet) String() string { return proto.CompactTextString(m) }
func (*MsgBet) ProtoMessage()    {}
func (*MsgBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{20}
}
func (m *MsgBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBet.Merge(m, src)
}
func (m *MsgBet) XXX_Size() int {
	return m.Size()
}
func (m *MsgBet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBet proto.InternalMessageInfo

func (m *MsgBet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBet) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MsgBet) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// MsgBetResponse defines the MsgBetResponse message.
type MsgBetResponse struct {
}

func (m *MsgBetResponse) Reset()         { *m = MsgBetResponse{} }
func (m *MsgBetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBetResponse) ProtoMessage()    {}
func (*MsgBetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{21}
}
func (m *MsgBetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBetResponse.Merge(m, src)
}
func (m *MsgBetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBetResponse proto.InternalMessageInfo

// MsgCall defines the MsgCall message.
type MsgCall struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgCall) Reset()         { *m = MsgCall{} }
func (m *MsgCall) String() string { return proto.CompactTextString(m) }
func (*MsgCall) ProtoMessage()    {}
func (*MsgCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{22}
}
func (m *MsgCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCall.Merge(m, src)
}
func (m *MsgCall) XXX_Size() int {
	return m.Size()
}
func (m *MsgCall) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCall.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCall proto.InternalMessageInfo

func (m *MsgCall) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCall) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgCallResponse defines the MsgCallResponse message.
type MsgCallResponse struct {
}

func (m *MsgCallResponse) Reset()         { *m = MsgCallResponse{} }
func (m *MsgCallResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCallResponse) ProtoMessage()    {}
func (*MsgCallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{23}
}
func (m *MsgCallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCallResponse.Merge(m, src)
}
func (m *MsgCallResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCallResponse proto.InternalMessageInfo

// MsgRaise defines the MsgRaise message.
type MsgRaise struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Amount  uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgRaise) Reset()         { *m = MsgRaise{} }
func (m *MsgRaise) String() string { return proto.CompactTextString(m) }
func (*MsgRaise) ProtoMessage()    {}
func (*MsgRaise) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{24}
}
func (m *MsgRaise) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRaise) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRaise.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRaise) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRaise.Merge(m, src)
}
func (m *MsgRaise) XXX_Size() int {
	return m.Size()
}
func (m *MsgRaise) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRaise.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRaise proto.InternalMessageInfo

func (m *MsgRaise) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRaise) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MsgRaise) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// MsgRaiseResponse defines the MsgRaiseResponse message.
type MsgRaiseResponse struct {
}

func (m *MsgRaiseResponse) Reset()         { *m = MsgRaiseResponse{} }
func (m *MsgRaiseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRaiseResponse) ProtoMessage()    {}
func (*MsgRaiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{25}
}
func (m *MsgRaiseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRaiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRaiseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRaiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRaiseResponse.Merge(m, src)
}
func (m *MsgRaiseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRaiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRaiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRaiseResponse proto.InternalMessageInfo

// MsgShowCards defines the MsgShowCards message.
type MsgShowCards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgShowCards) Reset()         { *m = MsgShowCards{} }
func (m *MsgShowCards) String() string { return proto.CompactTextString(m) }
func (*MsgShowCards) ProtoMessage()    {}
func (*MsgShowCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{26}
}
func (m *MsgShowCards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgShowCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgShowCards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgShowCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgShowCards.Merge(m, src)
}
func (m *MsgShowCards) XXX_Size() int {
	return m.Size()
}
func (m *MsgShowCards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgShowCards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgShowCards proto.InternalMessageInfo

func (m *MsgShowCards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgShowCards) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgShowCardsResponse defines the MsgShowCardsResponse message.
type MsgShowCardsResponse struct {
}

func (m *MsgShowCardsResponse) Reset()         { *m = MsgShowCardsResponse{} }
func (m *MsgShowCardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgShowCardsResponse) ProtoMessage()    {}
func (*MsgShowCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{27}
}
func (m *MsgShowCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgShowCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgShowCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgShowCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgShowCardsResponse.Merge(m, src)
}
func (m *MsgShowCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgShowCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgShowCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgShowCardsResponse proto.InternalMessageInfo

// MsgMuckCards defines the MsgMuckCards message.
type MsgMuckCards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GameId  uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MsgMuckCards) Reset()         { *m = MsgMuckCards{} }
func (m *MsgMuckCards) String() string { return proto.CompactTextString(m) }
func (*MsgMuckCards) ProtoMessage()    {}
func (*MsgMuckCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{28}
}
func (m *MsgMuckCards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMuckCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMuckCards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMuckCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMuckCards.Merge(m, src)
}
func (m *MsgMuckCards) XXX_Size() int {
	return m.Size()
}
func (m *MsgMuckCards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMuckCards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMuckCards proto.InternalMessageInfo

func (m *MsgMuckCards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMuckCards) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// MsgMuckCardsResponse defines the MsgMuckCardsResponse message.
type MsgMuckCardsResponse struct {
}

func (m *MsgMuckCardsResponse) Reset()         { *m = MsgMuckCardsResponse{} }
func (m *MsgMuckCardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMuckCardsResponse) ProtoMessage()    {}
func (*MsgMuckCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_847cce1c2790a5e1, []int{29}
}
func (m *MsgMuckCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMuckCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMuckCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMuckCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMuckCardsResponse.Merge(m, src)
}
func (m *MsgMuckCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMuckCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMuckCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMuckCardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "pokerchain.poker.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "pokerchain.poker.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateGame)(nil), "pokerchain.poker.v1.MsgCreateGame")
	proto.RegisterType((*MsgCreateGameResponse)(nil), "pokerchain.poker.v1.MsgCreateGameResponse")
	proto.RegisterType((*MsgCreateTable)(nil), "pokerchain.poker.v1.MsgCreateTable")
	proto.RegisterType((*MsgCreateTableResponse)(nil), "pokerchain.poker.v1.MsgCreateTableResponse")
	proto.RegisterType((*MsgJoinGame)(nil), "pokerchain.poker.v1.MsgJoinGame")
	proto.RegisterType((*MsgJoinGameResponse)(nil), "pokerchain.poker.v1.MsgJoinGameResponse")
	proto.RegisterType((*MsgLeaveGame)(nil), "pokerchain.poker.v1.MsgLeaveGame")
	proto.RegisterType((*MsgLeaveGameResponse)(nil), "pokerchain.poker.v1.MsgLeaveGameResponse")
	proto.RegisterType((*MsgDealCards)(nil), "pokerchain.poker.v1.MsgDealCards")
	proto.RegisterType((*MsgDealCardsResponse)(nil), "pokerchain.poker.v1.MsgDealCardsResponse")
	proto.RegisterType((*MsgPostSmallBlind)(nil), "pokerchain.poker.v1.MsgPostSmallBlind")
	proto.RegisterType((*MsgPostSmallBlindResponse)(nil), "pokerchain.poker.v1.MsgPostSmallBlindResponse")
	proto.RegisterType((*MsgPostBigBlind)(nil), "pokerchain.poker.v1.MsgPostBigBlind")
	proto.RegisterType((*MsgPostBigBlindResponse)(nil), "pokerchain.poker.v1.MsgPostBigBlindResponse")
	proto.RegisterType((*MsgFold)(nil), "pokerchain.poker.v1.MsgFold")
	proto.RegisterType((*MsgFoldResponse)(nil), "pokerchain.poker.v1.MsgFoldResponse")
	proto.RegisterType((*MsgCheck)(nil), "pokerchain.poker.v1.MsgCheck")
	proto.RegisterType((*MsgCheckResponse)(nil), "pokerchain.poker.v1.MsgCheckResponse")
	proto.RegisterType((*MsgBet)(nil), "pokerchain.poker.v1.MsgBet")
	proto.RegisterType((*MsgBetResponse)(nil), "pokerchain.poker.v1.MsgBetResponse")
	proto.RegisterType((*MsgCall)(nil), "pokerchain.poker.v1.MsgCall")
	proto.RegisterType((*MsgCallResponse)(nil), "pokerchain.poker.v1.MsgCallResponse")
	proto.RegisterType((*MsgRaise)(nil), "pokerchain.poker.v1.MsgRaise")
	proto.RegisterType((*MsgRaiseResponse)(nil), "pokerchain.poker.v1.MsgRaiseResponse")
	proto.RegisterType((*MsgShowCards)(nil), "pokerchain.poker.v1.MsgShowCards")
	proto.RegisterType((*MsgShowCardsResponse)(nil), "pokerchain.poker.v1.MsgShowCardsResponse")
	proto.RegisterType((*MsgMuckCards)(nil), "pokerchain.poker.v1.MsgMuckCards")
	proto.RegisterType((*MsgMuckCardsResponse)(nil), "pokerchain.poker.v1.MsgMuckCardsResponse")
}

func init() { proto.RegisterFile("pokerchain/poker/v1/tx.proto", fileDescriptor_847cce1c2790a5e1) }

var fileDescriptor_847cce1c2790a5e1 = []byte{
	// 1122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcf, 0x6b, 0xe3, 0xc6,
	0x17, 0x8f, 0x12, 0xdb, 0x89, 0x9f, 0x9d, 0x7c, 0x37, 0xda, 0xfc, 0x70, 0x94, 0x7c, 0x1d, 0xaf,
	0x93, 0x5d, 0x52, 0xef, 0xd6, 0xea, 0xa6, 0xb4, 0x87, 0xc0, 0x16, 0xea, 0x94, 0x2e, 0x1b, 0x2a,
	0x08, 0xce, 0xb6, 0xd0, 0x5e, 0xcc, 0xc8, 0x1e, 0x64, 0x11, 0x49, 0x63, 0x34, 0x72, 0x6a, 0x53,
	0x0a, 0x65, 0x6f, 0x2d, 0x2c, 0x14, 0xf6, 0xdc, 0x7b, 0x8f, 0x39, 0xf4, 0x0f, 0xe8, 0x71, 0x2f,
	0x85, 0xa5, 0xbd, 0xf4, 0x54, 0x4a, 0x52, 0xc8, 0xbf, 0x51, 0x66, 0x24, 0x8d, 0x65, 0xd9, 0x72,
	0xc2, 0xb2, 0xde, 0x5e, 0x8c, 0x34, 0x9f, 0xcf, 0x9b, 0xf7, 0x79, 0x1f, 0x3d, 0xcf, 0x93, 0x60,
	0xab, 0x43, 0x4e, 0xb1, 0xdb, 0x6c, 0x23, 0xd3, 0x51, 0xf9, 0xa5, 0x7a, 0xf6, 0x50, 0xf5, 0x7a,
	0xd5, 0x8e, 0x4b, 0x3c, 0x22, 0xdf, 0x1e, 0xa0, 0x55, 0x7e, 0x59, 0x3d, 0x7b, 0xa8, 0x2c, 0x23,
	0xdb, 0x74, 0x88, 0xca, 0x7f, 0x7d, 0x9e, 0xb2, 0xde, 0x24, 0xd4, 0x26, 0x54, 0xb5, 0xa9, 0xc1,
	0xe2, 0x6d, 0x6a, 0x04, 0xc0, 0x86, 0x0f, 0x34, 0xf8, 0x9d, 0xea, 0xdf, 0x04, 0xd0, 0x8a, 0x41,
	0x0c, 0xe2, 0xaf, 0xb3, 0xab, 0x60, 0x75, 0xcb, 0x20, 0xc4, 0xb0, 0xb0, 0x8a, 0x3a, 0xa6, 0x8a,
	0x1c, 0x87, 0x78, 0xc8, 0x33, 0x89, 0x13, 0xc6, 0x94, 0xc6, 0xa9, 0xed, 0x20, 0x17, 0xd9, 0x21,
	0xa3, 0x38, 0x8e, 0x61, 0x20, 0x1b, 0xfb, 0x78, 0xf9, 0x57, 0x09, 0xfe, 0xa7, 0x51, 0xe3, 0xf3,
	0x4e, 0x0b, 0x79, 0xf8, 0x98, 0x47, 0xca, 0x1f, 0x42, 0x16, 0x75, 0xbd, 0x36, 0x71, 0x4d, 0xaf,
	0x5f, 0x90, 0x4a, 0xd2, 0x5e, 0xb6, 0x56, 0xf8, 0xfd, 0x97, 0x77, 0x57, 0x02, 0xb9, 0x1f, 0xb7,
	0x5a, 0x2e, 0xa6, 0xf4, 0xc4, 0x73, 0x4d, 0xc7, 0xa8, 0x0f, 0xa8, 0xf2, 0x47, 0x90, 0xf1, 0x73,
	0x17, 0x66, 0x4b, 0xd2, 0x5e, 0x6e, 0x7f, 0xb3, 0x3a, 0xc6, 0xae, 0xaa, 0x9f, 0xa4, 0x96, 0x7d,
	0xf9, 0xd7, 0xf6, 0xcc, 0xcf, 0x57, 0xe7, 0x15, 0xa9, 0x1e, 0x44, 0x1d, 0x7c, 0xf0, 0xec, 0xea,
	0xbc, 0x32, 0xd8, 0xef, 0x87, 0xab, 0xf3, 0x4a, 0x39, 0x22, 0xbf, 0x17, 0x14, 0x10, 0x93, 0x5b,
	0xde, 0x80, 0xf5, 0xd8, 0x52, 0x1d, 0xd3, 0x0e, 0x71, 0x28, 0x2e, 0x3f, 0x9f, 0x85, 0x45, 0x8d,
	0x1a, 0x87, 0x2e, 0x46, 0x1e, 0x7e, 0x8c, 0x6c, 0x2c, 0xef, 0xc3, 0x7c, 0x93, 0xdd, 0x11, 0xf7,
	0xda, 0xca, 0x42, 0xa2, 0xbc, 0x05, 0x60, 0x9b, 0x4e, 0x43, 0xef, 0xf6, 0x1b, 0xa6, 0xc3, 0x6b,
	0x4b, 0xd5, 0x17, 0x6c, 0xd3, 0xa9, 0x75, 0xfb, 0x4f, 0x1c, 0x8e, 0xa2, 0x5e, 0x88, 0xce, 0x05,
	0x28, 0xea, 0xf9, 0xe8, 0x36, 0xe4, 0xa8, 0x8d, 0x2c, 0xab, 0xa1, 0x5b, 0xa6, 0xd3, 0x2a, 0xa4,
	0x38, 0x0c, 0x7c, 0xa9, 0xc6, 0x56, 0xe4, 0x4d, 0xc8, 0xea, 0xa6, 0x11, 0xc0, 0x69, 0x3f, 0x5a,
	0x37, 0x0d, 0x1f, 0xdc, 0x86, 0x1c, 0xdb, 0xbb, 0x63, 0xa1, 0x3e, 0x76, 0x69, 0x21, 0xe3, 0x47,
	0xdb, 0xa8, 0x77, 0xec, 0xaf, 0x70, 0x82, 0xe9, 0x08, 0xc2, 0x7c, 0x40, 0x30, 0x9d, 0x80, 0x70,
	0x90, 0x67, 0x9e, 0x86, 0x95, 0x94, 0xd7, 0x61, 0x75, 0xc8, 0x0e, 0x61, 0xd4, 0x6f, 0xb3, 0xb0,
	0x24, 0x90, 0xa7, 0x48, 0xb7, 0x5e, 0xcf, 0xa9, 0x1d, 0x58, 0xf4, 0x58, 0x70, 0x03, 0xf9, 0x38,
	0x37, 0x2b, 0x5b, 0xcf, 0xf3, 0xc5, 0x20, 0x46, 0x5e, 0x85, 0xcc, 0x90, 0x59, 0x69, 0x9d, 0x3b,
	0xf5, 0x08, 0xc0, 0x8f, 0xf5, 0xfa, 0x1d, 0xcc, 0x8d, 0x5a, 0xda, 0x2f, 0x8e, 0xed, 0x20, 0xae,
	0xef, 0x69, 0xbf, 0x83, 0xeb, 0x59, 0x2f, 0xbc, 0x8c, 0x1b, 0x9d, 0x9e, 0x6c, 0x74, 0x66, 0xb2,
	0xd1, 0xcc, 0xc7, 0xc5, 0x49, 0x46, 0x2f, 0x04, 0x84, 0x24, 0xa3, 0x1f, 0xc1, 0xda, 0xb0, 0x9d,
	0xa1, 0xd3, 0xa3, 0x16, 0x49, 0xa3, 0x16, 0x95, 0x5f, 0x48, 0x90, 0xd3, 0xa8, 0x71, 0x44, 0x4c,
	0xe7, 0xb5, 0xbb, 0x76, 0x1d, 0xe6, 0xd9, 0xff, 0xbc, 0x61, 0xb6, 0x82, 0x96, 0xcd, 0xb0, 0xdb,
	0x27, 0x2d, 0x59, 0x86, 0x14, 0xc5, 0xc8, 0x0b, 0xdc, 0xe7, 0xd7, 0x91, 0x67, 0x92, 0x8a, 0x3c,
	0x93, 0x58, 0x51, 0xab, 0x70, 0x3b, 0x22, 0x4a, 0xf4, 0x8e, 0x09, 0x79, 0x8d, 0x1a, 0x9f, 0x61,
	0x74, 0x86, 0xdf, 0xb8, 0xd8, 0x98, 0x82, 0x35, 0x58, 0x89, 0xa6, 0x8a, 0x49, 0xf8, 0x04, 0x23,
	0xeb, 0x10, 0xb9, 0x2d, 0x3a, 0x7d, 0x09, 0x22, 0x95, 0x90, 0xe0, 0xc0, 0xb2, 0x46, 0x8d, 0x63,
	0x42, 0xbd, 0x93, 0x41, 0xcf, 0x4d, 0x51, 0xc7, 0x26, 0x6c, 0x8c, 0xe4, 0x13, 0x62, 0x2c, 0x7e,
	0xa8, 0x33, 0xb0, 0x16, 0x76, 0xf8, 0x14, 0xa5, 0xf8, 0x07, 0x70, 0x34, 0x9b, 0x10, 0xd2, 0x82,
	0x79, 0x8d, 0x1a, 0x9f, 0x12, 0x6b, 0xaa, 0x02, 0x96, 0x79, 0xb9, 0x2c, 0x8b, 0x48, 0x8c, 0x61,
	0x81, 0xfd, 0x01, 0xdb, 0xb8, 0x79, 0x3a, 0xcd, 0xcc, 0x32, 0xdc, 0x0a, 0xd3, 0x88, 0xd4, 0xdf,
	0x40, 0x46, 0xa3, 0x46, 0x0d, 0x7b, 0x6f, 0xf6, 0x6f, 0xbb, 0x06, 0x19, 0x64, 0x93, 0xae, 0x13,
	0xfe, 0x71, 0x83, 0xbb, 0x98, 0xa0, 0x5b, 0xfc, 0x1c, 0xaf, 0x61, 0x2f, 0xf6, 0x08, 0x0e, 0x91,
	0x65, 0x4d, 0xff, 0x11, 0xb0, 0x2c, 0x22, 0xf1, 0xb7, 0xfc, 0x11, 0xd4, 0x91, 0x49, 0xf1, 0x7f,
	0xe1, 0x84, 0xff, 0x68, 0x78, 0xfa, 0xd8, 0x39, 0x71, 0xd2, 0x26, 0x5f, 0xbf, 0xa5, 0x73, 0x42,
	0xa4, 0x8a, 0x49, 0xd0, 0xba, 0xcd, 0xd3, 0xb7, 0x24, 0x41, 0xa4, 0x0a, 0x25, 0xec, 0xff, 0x94,
	0x83, 0x39, 0x8d, 0x1a, 0xb2, 0x0e, 0xf9, 0xa1, 0xf7, 0xbe, 0xdd, 0xb1, 0xd3, 0x36, 0xf6, 0x6e,
	0xa5, 0x3c, 0xb8, 0x09, 0x4b, 0x8c, 0xbb, 0xef, 0x25, 0x80, 0xc8, 0xeb, 0x57, 0x39, 0x29, 0x78,
	0xc0, 0x51, 0x2a, 0xd7, 0x73, 0x84, 0x9b, 0xf7, 0x9f, 0xfd, 0xf1, 0xcf, 0x8b, 0xd9, 0xbb, 0x07,
	0x52, 0xa5, 0x5c, 0x52, 0xc7, 0xbd, 0xea, 0x72, 0x2f, 0x70, 0x83, 0xf9, 0x23, 0x3f, 0x97, 0x20,
	0x17, 0x7d, 0xc3, 0xd9, 0x99, 0x9c, 0x88, 0x93, 0x94, 0xfb, 0x37, 0x20, 0x09, 0x39, 0x0f, 0xb8,
	0x9c, 0x7b, 0x4c, 0xce, 0x9d, 0x49, 0x72, 0xf8, 0xb0, 0x97, 0xbf, 0x80, 0x05, 0x31, 0xe1, 0x4b,
	0x49, 0x69, 0x42, 0x86, 0xb2, 0x77, 0x1d, 0x43, 0x78, 0xfe, 0x25, 0x64, 0x07, 0xd3, 0xf8, 0x4e,
	0x52, 0x98, 0xa0, 0x28, 0xef, 0x5c, 0x4b, 0x89, 0x6e, 0x3d, 0x98, 0xb2, 0x89, 0x5b, 0x0b, 0x4a,
	0xf2, 0xd6, 0x23, 0x03, 0x54, 0x6e, 0xc3, 0x52, 0x6c, 0x7a, 0xde, 0x4b, 0x0a, 0x1e, 0xe6, 0x29,
	0xd5, 0x9b, 0xf1, 0x44, 0x26, 0x1d, 0xf2, 0x43, 0xa3, 0x71, 0x77, 0x52, 0x7c, 0xc8, 0x4a, 0xee,
	0xfb, 0x71, 0x83, 0x4f, 0x3e, 0x82, 0x14, 0x9f, 0x7a, 0x5b, 0x49, 0x51, 0x0c, 0x55, 0x76, 0x27,
	0xa1, 0x62, 0x2f, 0x0d, 0xd2, 0xfe, 0x20, 0xfb, 0x7f, 0x62, 0x2f, 0x32, 0x58, 0xb9, 0x3b, 0x11,
	0x16, 0xdb, 0x3d, 0x86, 0x39, 0x36, 0x9c, 0x36, 0x93, 0xd8, 0x35, 0xec, 0x29, 0x3b, 0x13, 0xc0,
	0x68, 0x8d, 0x7c, 0xac, 0x24, 0xd6, 0xc8, 0xd0, 0xe4, 0x1a, 0xa3, 0xc3, 0x82, 0xd5, 0xe8, 0x4f,
	0x8a, 0xc4, 0x1a, 0x39, 0x9c, 0x5c, 0xe3, 0xd0, 0x41, 0xcf, 0xfa, 0x74, 0x70, 0xca, 0x27, 0xf6,
	0xa9, 0xa0, 0x24, 0xf7, 0xe9, 0xc8, 0x01, 0xce, 0xb6, 0x1e, 0x9c, 0xde, 0x89, 0x5b, 0x0b, 0x4a,
	0xf2, 0xd6, 0x23, 0x07, 0xb3, 0x92, 0xfe, 0x8e, 0x7d, 0x0f, 0xd7, 0x8e, 0x5e, 0x5e, 0x14, 0xa5,
	0x57, 0x17, 0x45, 0xe9, 0xef, 0x8b, 0xa2, 0xf4, 0xe3, 0x65, 0x71, 0xe6, 0xd5, 0x65, 0x71, 0xe6,
	0xcf, 0xcb, 0xe2, 0xcc, 0x57, 0xef, 0x19, 0xa6, 0xd7, 0xee, 0xea, 0xd5, 0x26, 0xb1, 0xd5, 0x3e,
	0xe9, 0xba, 0x5d, 0x8a, 0x5d, 0x07, 0xd9, 0x58, 0x1d, 0xf3, 0x99, 0xcc, 0x3e, 0xa3, 0xa8, 0x9e,
	0xe1, 0x9f, 0xf9, 0xef, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x42, 0x59, 0xa9, 0xfd, 0xd8, 0x10,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateGame defines the CreateGame RPC.
	CreateGame(ctx context.Context, in *MsgCreateGame, opts ...grpc.CallOption) (*MsgCreateGameResponse, error)
	// CreateTable defines the CreateTable RPC.
	CreateTable(ctx context.Context, in *MsgCreateTable, opts ...grpc.CallOption) (*MsgCreateTableResponse, error)
	// JoinGame defines the JoinGame RPC.
	JoinGame(ctx context.Context, in *MsgJoinGame, opts ...grpc.CallOption) (*MsgJoinGameResponse, error)
	// LeaveGame defines the LeaveGame RPC.
	LeaveGame(ctx context.Context, in *MsgLeaveGame, opts ...grpc.CallOption) (*MsgLeaveGameResponse, error)
	// DealCards defines the DealCards RPC.
	DealCards(ctx context.Context, in *MsgDealCards, opts ...grpc.CallOption) (*MsgDealCardsResponse, error)
	// PostSmallBlind defines the PostSmallBlind RPC.
	PostSmallBlind(ctx context.Context, in *MsgPostSmallBlind, opts ...grpc.CallOption) (*MsgPostSmallBlindResponse, error)
	// PostBigBlind defines the PostBigBlind RPC.
	PostBigBlind(ctx context.Context, in *MsgPostBigBlind, opts ...grpc.CallOption) (*MsgPostBigBlindResponse, error)
	// Fold defines the Fold RPC.
	Fold(ctx context.Context, in *MsgFold, opts ...grpc.CallOption) (*MsgFoldResponse, error)
	// Check defines the Check RPC.
	Check(ctx context.Context, in *MsgCheck, opts ...grpc.CallOption) (*MsgCheckResponse, error)
	// Bet defines the Bet RPC.
	Bet(ctx context.Context, in *MsgBet, opts ...grpc.CallOption) (*MsgBetResponse, error)
	// Call defines the Call RPC.
	Call(ctx context.Context, in *MsgCall, opts ...grpc.CallOption) (*MsgCallResponse, error)
	// Raise defines the Raise RPC.
	Raise(ctx context.Context, in *MsgRaise, opts ...grpc.CallOption) (*MsgRaiseResponse, error)
	// ShowCards defines the ShowCards RPC.
	ShowCards(ctx context.Context, in *MsgShowCards, opts ...grpc.CallOption) (*MsgShowCardsResponse, error)
	// MuckCards defines the MuckCards RPC.
	MuckCards(ctx context.Context, in *MsgMuckCards, opts ...grpc.CallOption) (*MsgMuckCardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGame(ctx context.Context, in *MsgCreateGame, opts ...grpc.CallOption) (*MsgCreateGameResponse, error) {
	out := new(MsgCreateGameResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTable(ctx context.Context, in *MsgCreateTable, opts ...grpc.CallOption) (*MsgCreateTableResponse, error) {
	out := new(MsgCreateTableResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinGame(ctx context.Context, in *MsgJoinGame, opts ...grpc.CallOption) (*MsgJoinGameResponse, error) {
	out := new(MsgJoinGameResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveGame(ctx context.Context, in *MsgLeaveGame, opts ...grpc.CallOption) (*MsgLeaveGameResponse, error) {
	out := new(MsgLeaveGameResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/LeaveGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DealCards(ctx context.Context, in *MsgDealCards, opts ...grpc.CallOption) (*MsgDealCardsResponse, error) {
	out := new(MsgDealCardsResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/DealCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostSmallBlind(ctx context.Context, in *MsgPostSmallBlind, opts ...grpc.CallOption) (*MsgPostSmallBlindResponse, error) {
	out := new(MsgPostSmallBlindResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/PostSmallBlind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostBigBlind(ctx context.Context, in *MsgPostBigBlind, opts ...grpc.CallOption) (*MsgPostBigBlindResponse, error) {
	out := new(MsgPostBigBlindResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/PostBigBlind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Fold(ctx context.Context, in *MsgFold, opts ...grpc.CallOption) (*MsgFoldResponse, error) {
	out := new(MsgFoldResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/Fold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Check(ctx context.Context, in *MsgCheck, opts ...grpc.CallOption) (*MsgCheckResponse, error) {
	out := new(MsgCheckResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Bet(ctx context.Context, in *MsgBet, opts ...grpc.CallOption) (*MsgBetResponse, error) {
	out := new(MsgBetResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/Bet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Call(ctx context.Context, in *MsgCall, opts ...grpc.CallOption) (*MsgCallResponse, error) {
	out := new(MsgCallResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Raise(ctx context.Context, in *MsgRaise, opts ...grpc.CallOption) (*MsgRaiseResponse, error) {
	out := new(MsgRaiseResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/Raise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ShowCards(ctx context.Context, in *MsgShowCards, opts ...grpc.CallOption) (*MsgShowCardsResponse, error) {
	out := new(MsgShowCardsResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/ShowCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MuckCards(ctx context.Context, in *MsgMuckCards, opts ...grpc.CallOption) (*MsgMuckCardsResponse, error) {
	out := new(MsgMuckCardsResponse)
	err := c.cc.Invoke(ctx, "/pokerchain.poker.v1.Msg/MuckCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateGame defines the CreateGame RPC.
	CreateGame(context.Context, *MsgCreateGame) (*MsgCreateGameResponse, error)
	// CreateTable defines the CreateTable RPC.
	CreateTable(context.Context, *MsgCreateTable) (*MsgCreateTableResponse, error)
	// JoinGame defines the JoinGame RPC.
	JoinGame(context.Context, *MsgJoinGame) (*MsgJoinGameResponse, error)
	// LeaveGame defines the LeaveGame RPC.
	LeaveGame(context.Context, *MsgLeaveGame) (*MsgLeaveGameResponse, error)
	// DealCards defines the DealCards RPC.
	DealCards(context.Context, *MsgDealCards) (*MsgDealCardsResponse, error)
	// PostSmallBlind defines the PostSmallBlind RPC.
	PostSmallBlind(context.Context, *MsgPostSmallBlind) (*MsgPostSmallBlindResponse, error)
	// PostBigBlind defines the PostBigBlind RPC.
	PostBigBlind(context.Context, *MsgPostBigBlind) (*MsgPostBigBlindResponse, error)
	// Fold defines the Fold RPC.
	Fold(context.Context, *MsgFold) (*MsgFoldResponse, error)
	// Check defines the Check RPC.
	Check(context.Context, *MsgCheck) (*MsgCheckResponse, error)
	// Bet defines the Bet RPC.
	Bet(context.Context, *MsgBet) (*MsgBetResponse, error)
	// Call defines the Call RPC.
	Call(context.Context, *MsgCall) (*MsgCallResponse, error)
	// Raise defines the Raise RPC.
	Raise(context.Context, *MsgRaise) (*MsgRaiseResponse, error)
	// ShowCards defines the ShowCards RPC.
	ShowCards(context.Context, *MsgShowCards) (*MsgShowCardsResponse, error)
	// MuckCards defines the MuckCards RPC.
	MuckCards(context.Context, *MsgMuckCards) (*MsgMuckCardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateGame(ctx context.Context, req *MsgCreateGame) (*MsgCreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (*UnimplementedMsgServer) CreateTable(ctx context.Context, req *MsgCreateTable) (*MsgCreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedMsgServer) JoinGame(ctx context.Context, req *MsgJoinGame) (*MsgJoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (*UnimplementedMsgServer) LeaveGame(ctx context.Context, req *MsgLeaveGame) (*MsgLeaveGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGame not implemented")
}
func (*UnimplementedMsgServer) DealCards(ctx context.Context, req *MsgDealCards) (*MsgDealCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealCards not implemented")
}
func (*UnimplementedMsgServer) PostSmallBlind(ctx context.Context, req *MsgPostSmallBlind) (*MsgPostSmallBlindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSmallBlind not implemented")
}
func (*UnimplementedMsgServer) PostBigBlind(ctx context.Context, req *MsgPostBigBlind) (*MsgPostBigBlindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBigBlind not implemented")
}
func (*UnimplementedMsgServer) Fold(ctx context.Context, req *MsgFold) (*MsgFoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fold not implemented")
}
func (*UnimplementedMsgServer) Check(ctx context.Context, req *MsgCheck) (*MsgCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedMsgServer) Bet(ctx context.Context, req *MsgBet) (*MsgBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bet not implemented")
}
func (*UnimplementedMsgServer) Call(ctx context.Context, req *MsgCall) (*MsgCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedMsgServer) Raise(ctx context.Context, req *MsgRaise) (*MsgRaiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Raise not implemented")
}
func (*UnimplementedMsgServer) ShowCards(ctx context.Context, req *MsgShowCards) (*MsgShowCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCards not implemented")
}
func (*UnimplementedMsgServer) MuckCards(ctx context.Context, req *MsgMuckCards) (*MsgMuckCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuckCards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGame(ctx, req.(*MsgCreateGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTable(ctx, req.(*MsgCreateTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinGame(ctx, req.(*MsgJoinGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/LeaveGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveGame(ctx, req.(*MsgLeaveGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DealCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDealCards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DealCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/DealCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DealCards(ctx, req.(*MsgDealCards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostSmallBlind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostSmallBlind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostSmallBlind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/PostSmallBlind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostSmallBlind(ctx, req.(*MsgPostSmallBlind))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostBigBlind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostBigBlind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostBigBlind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/PostBigBlind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostBigBlind(ctx, req.(*MsgPostBigBlind))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Fold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Fold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/Fold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Fold(ctx, req.(*MsgFold))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Check(ctx, req.(*MsgCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Bet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Bet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/Bet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Bet(ctx, req.(*MsgBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Call(ctx, req.(*MsgCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Raise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRaise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Raise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/Raise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Raise(ctx, req.(*MsgRaise))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ShowCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgShowCards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ShowCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/ShowCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ShowCards(ctx, req.(*MsgShowCards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MuckCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMuckCards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MuckCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokerchain.poker.v1.Msg/MuckCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MuckCards(ctx, req.(*MsgMuckCards))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pokerchain.poker.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _Msg_CreateGame_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _Msg_CreateTable_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _Msg_JoinGame_Handler,
		},
		{
			MethodName: "LeaveGame",
			Handler:    _Msg_LeaveGame_Handler,
		},
		{
			MethodName: "DealCards",
			Handler:    _Msg_DealCards_Handler,
		},
		{
			MethodName: "PostSmallBlind",
			Handler:    _Msg_PostSmallBlind_Handler,
		},
		{
			MethodName: "PostBigBlind",
			Handler:    _Msg_PostBigBlind_Handler,
		},
		{
			MethodName: "Fold",
			Handler:    _Msg_Fold_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Msg_Check_Handler,
		},
		{
			MethodName: "Bet",
			Handler:    _Msg_Bet_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Msg_Call_Handler,
		},
		{
			MethodName: "Raise",
			Handler:    _Msg_Raise_Handler,
		},
		{
			MethodName: "ShowCards",
			Handler:    _Msg_ShowCards_Handler,
		},
		{
			MethodName: "MuckCards",
			Handler:    _Msg_MuckCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pokerchain/poker/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinPlayers != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinPlayers))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxPlayers != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxPlayers))
		i--
		dAtA[i] = 0x30
	}
	if m.BigBlind != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BigBlind))
		i--
		dAtA[i] = 0x28
	}
	if m.SmallBlind != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SmallBlind))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxBuyIn != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxBuyIn))
		i--
		dAtA[i] = 0x18
	}
	if m.MinBuyIn != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinBuyIn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinPlayers != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinPlayers))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxPlayers != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxPlayers))
		i--
		dAtA[i] = 0x38
	}
	if m.BigBlind != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BigBlind))
		i--
		dAtA[i] = 0x30
	}
	if m.SmallBlind != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SmallBlind))
		i--
		dAtA[i] = 0x28
	}
	if m.TableType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TableType))
		i--
		dAtA[i] = 0x20
	}
	if m.BuyIn != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BuyIn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TableAddress) > 0 {
		i -= len(m.TableAddress)
		copy(dAtA[i:], m.TableAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TableAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableAddress) > 0 {
		i -= len(m.TableAddress)
		copy(dAtA[i:], m.TableAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TableAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuyIn != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BuyIn))
		i--
		dAtA[i] = 0x20
	}
	if m.Seat != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seat))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaveGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDealCards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDealCards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDealCards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDealCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDealCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDealCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostSmallBlind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostSmallBlind) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostSmallBlind) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostSmallBlindResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostSmallBlindResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostSmallBlindResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostBigBlind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostBigBlind) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostBigBlind) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostBigBlindResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostBigBlindResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostBigBlindResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFoldResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFoldResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFoldResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRaise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRaise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRaise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRaiseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRaiseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRaiseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgShowCards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgShowCards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgShowCards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgShowCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgShowCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgShowCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMuckCards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMuckCards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMuckCards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMuckCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMuckCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMuckCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinBuyIn != 0 {
		n += 1 + sovTx(uint64(m.MinBuyIn))
	}
	if m.MaxBuyIn != 0 {
		n += 1 + sovTx(uint64(m.MaxBuyIn))
	}
	if m.SmallBlind != 0 {
		n += 1 + sovTx(uint64(m.SmallBlind))
	}
	if m.BigBlind != 0 {
		n += 1 + sovTx(uint64(m.BigBlind))
	}
	if m.MaxPlayers != 0 {
		n += 1 + sovTx(uint64(m.MaxPlayers))
	}
	if m.MinPlayers != 0 {
		n += 1 + sovTx(uint64(m.MinPlayers))
	}
	return n
}

func (m *MsgCreateGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TableAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BuyIn != 0 {
		n += 1 + sovTx(uint64(m.BuyIn))
	}
	if m.TableType != 0 {
		n += 1 + sovTx(uint64(m.TableType))
	}
	if m.SmallBlind != 0 {
		n += 1 + sovTx(uint64(m.SmallBlind))
	}
	if m.BigBlind != 0 {
		n += 1 + sovTx(uint64(m.BigBlind))
	}
	if m.MaxPlayers != 0 {
		n += 1 + sovTx(uint64(m.MaxPlayers))
	}
	if m.MinPlayers != 0 {
		n += 1 + sovTx(uint64(m.MinPlayers))
	}
	return n
}

func (m *MsgCreateTableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	if m.Seat != 0 {
		n += 1 + sovTx(uint64(m.Seat))
	}
	if m.BuyIn != 0 {
		n += 1 + sovTx(uint64(m.BuyIn))
	}
	return n
}

func (m *MsgJoinGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaveGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgLeaveGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDealCards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgDealCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostSmallBlind) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgPostSmallBlindResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostBigBlind) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgPostBigBlindResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgFoldResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgBetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgCallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRaise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgRaiseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgShowCards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgShowCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMuckCards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovTx(uint64(m.GameId))
	}
	return n
}

func (m *MsgMuckCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBuyIn", wireType)
			}
			m.MinBuyIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBuyIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBuyIn", wireType)
			}
			m.MaxBuyIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBuyIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallBlind", wireType)
			}
			m.SmallBlind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmallBlind |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBlind", wireType)
			}
			m.BigBlind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBlind |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayers", wireType)
			}
			m.MaxPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPlayers", wireType)
			}
			m.MinPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPlayers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyIn", wireType)
			}
			m.BuyIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableType", wireType)
			}
			m.TableType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableType |= TableType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallBlind", wireType)
			}
			m.SmallBlind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmallBlind |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBlind", wireType)
			}
			m.BigBlind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBlind |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayers", wireType)
			}
			m.MaxPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPlayers", wireType)
			}
			m.MinPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPlayers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyIn", wireType)
			}
			m.BuyIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDealCards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDealCards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDealCards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDealCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDealCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDealCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostSmallBlind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostSmallBlind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostSmallBlind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostSmallBlindResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostSmallBlindResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostSmallBlindResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostBigBlind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostBigBlind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostBigBlind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostBigBlindResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostBigBlindResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostBigBlindResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFoldResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFoldResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFoldResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRaise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRaise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRaise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRaiseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRaiseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRaiseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgShowCards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgShowCards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgShowCards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgShowCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgShowCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgShowCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMuckCards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMuckCards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMuckCards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMuckCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMuckCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMuckCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
