// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pokerchain/poker/v1/action_history.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ActionHistory defines the ActionHistory message.
type ActionHistory struct {
	Index         string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	GameId        uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Round         string `protobuf:"bytes,3,opt,name=round,proto3" json:"round,omitempty"`
	ActionIndex   uint64 `protobuf:"varint,4,opt,name=action_index,json=actionIndex,proto3" json:"action_index,omitempty"`
	PlayerAddress string `protobuf:"bytes,5,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
	ActionType    string `protobuf:"bytes,6,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Amount        uint64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ActionHistory) Reset()         { *m = ActionHistory{} }
func (m *ActionHistory) String() string { return proto.CompactTextString(m) }
func (*ActionHistory) ProtoMessage()    {}
func (*ActionHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fc11931254e3669, []int{0}
}
func (m *ActionHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionHistory.Merge(m, src)
}
func (m *ActionHistory) XXX_Size() int {
	return m.Size()
}
func (m *ActionHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ActionHistory proto.InternalMessageInfo

func (m *ActionHistory) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ActionHistory) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *ActionHistory) GetRound() string {
	if m != nil {
		return m.Round
	}
	return ""
}

func (m *ActionHistory) GetActionIndex() uint64 {
	if m != nil {
		return m.ActionIndex
	}
	return 0
}

func (m *ActionHistory) GetPlayerAddress() string {
	if m != nil {
		return m.PlayerAddress
	}
	return ""
}

func (m *ActionHistory) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *ActionHistory) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*ActionHistory)(nil), "pokerchain.poker.v1.ActionHistory")
}

func init() {
	proto.RegisterFile("pokerchain/poker/v1/action_history.proto", fileDescriptor_1fc11931254e3669)
}

var fileDescriptor_1fc11931254e3669 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x68, 0x53, 0x61, 0x28, 0x83, 0x41, 0xe0, 0xc9, 0x14, 0x24, 0xa4, 0x4c, 0x09,
	0x15, 0x4f, 0x50, 0x26, 0xca, 0x58, 0x31, 0xb1, 0x44, 0x6e, 0x6c, 0x35, 0x16, 0xc4, 0x8e, 0x1c,
	0xa7, 0x6a, 0xde, 0x82, 0xc7, 0x62, 0xec, 0x06, 0x23, 0x4a, 0x5e, 0x04, 0xc5, 0x17, 0x89, 0x6e,
	0xf7, 0xff, 0xfa, 0xee, 0xbf, 0xd3, 0x8f, 0xa3, 0xd2, 0xbc, 0x4b, 0x9b, 0xe5, 0x5c, 0xe9, 0xc4,
	0x8f, 0xc9, 0x76, 0x9e, 0xf0, 0xcc, 0x29, 0xa3, 0xd3, 0x5c, 0x55, 0xce, 0xd8, 0x26, 0x2e, 0xad,
	0x71, 0x86, 0x5c, 0xfc, 0x93, 0xb1, 0x1f, 0xe3, 0xed, 0xfc, 0xee, 0x1b, 0xe1, 0xe9, 0xc2, 0xd3,
	0xcf, 0x00, 0x93, 0x4b, 0x3c, 0x56, 0x5a, 0xc8, 0x1d, 0x45, 0x33, 0x14, 0x9d, 0xac, 0x40, 0x90,
	0x6b, 0x3c, 0xd9, 0xf0, 0x42, 0xa6, 0x4a, 0xd0, 0xa3, 0x19, 0x8a, 0x46, 0xab, 0xb0, 0x97, 0x4b,
	0xd1, 0xe3, 0xd6, 0xd4, 0x5a, 0xd0, 0x63, 0xc0, 0xbd, 0x20, 0xb7, 0xf8, 0x6c, 0xf8, 0x01, 0xb2,
	0x46, 0x7e, 0xe7, 0x14, 0xbc, 0xa5, 0x4f, 0xbc, 0xc7, 0xe7, 0xe5, 0x07, 0x6f, 0xa4, 0x4d, 0xb9,
	0x10, 0x56, 0x56, 0x15, 0x1d, 0xfb, 0x84, 0x29, 0xb8, 0x0b, 0x30, 0xc9, 0x0d, 0x1e, 0xb6, 0x52,
	0xd7, 0x94, 0x92, 0x86, 0x9e, 0xc1, 0x60, 0xbd, 0x36, 0xa5, 0x24, 0x57, 0x38, 0xe4, 0x85, 0xa9,
	0xb5, 0xa3, 0x13, 0x78, 0x0c, 0xd4, 0xd3, 0xcb, 0x57, 0xcb, 0xd0, 0xbe, 0x65, 0xe8, 0xb7, 0x65,
	0xe8, 0xb3, 0x63, 0xc1, 0xbe, 0x63, 0xc1, 0x4f, 0xc7, 0x82, 0xb7, 0x87, 0x8d, 0x72, 0x79, 0xbd,
	0x8e, 0x33, 0x53, 0x24, 0x8d, 0xa9, 0x6d, 0x5d, 0x49, 0xab, 0x79, 0x21, 0x93, 0x83, 0x2a, 0x77,
	0x43, 0x99, 0xfd, 0xd1, 0x6a, 0x1d, 0xfa, 0x06, 0x1f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xaf,
	0xce, 0xdf, 0xce, 0x6d, 0x01, 0x00, 0x00,
}

func (m *ActionHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintActionHistory(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ActionType) > 0 {
		i -= len(m.ActionType)
		copy(dAtA[i:], m.ActionType)
		i = encodeVarintActionHistory(dAtA, i, uint64(len(m.ActionType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PlayerAddress) > 0 {
		i -= len(m.PlayerAddress)
		copy(dAtA[i:], m.PlayerAddress)
		i = encodeVarintActionHistory(dAtA, i, uint64(len(m.PlayerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ActionIndex != 0 {
		i = encodeVarintActionHistory(dAtA, i, uint64(m.ActionIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Round) > 0 {
		i -= len(m.Round)
		copy(dAtA[i:], m.Round)
		i = encodeVarintActionHistory(dAtA, i, uint64(len(m.Round)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GameId != 0 {
		i = encodeVarintActionHistory(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintActionHistory(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActionHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovActionHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovActionHistory(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovActionHistory(uint64(m.GameId))
	}
	l = len(m.Round)
	if l > 0 {
		n += 1 + l + sovActionHistory(uint64(l))
	}
	if m.ActionIndex != 0 {
		n += 1 + sovActionHistory(uint64(m.ActionIndex))
	}
	l = len(m.PlayerAddress)
	if l > 0 {
		n += 1 + l + sovActionHistory(uint64(l))
	}
	l = len(m.ActionType)
	if l > 0 {
		n += 1 + l + sovActionHistory(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovActionHistory(uint64(m.Amount))
	}
	return n
}

func sovActionHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActionHistory(x uint64) (n int) {
	return sovActionHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActionHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionIndex", wireType)
			}
			m.ActionIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActionHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActionHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActionHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActionHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActionHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActionHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActionHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActionHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActionHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActionHistory = fmt.Errorf("proto: unexpected end of group")
)
